// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: charity/charity.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Charity defines the charity object
type Charity struct {
	CharityName string `protobuf:"bytes,1,opt,name=charity_name,json=charityName,proto3" json:"charity_name,omitempty"`
	AccAddress  string `protobuf:"bytes,2,opt,name=accAddress,proto3" json:"accAddress,omitempty"`
	Checksum    string `protobuf:"bytes,3,opt,name=checksum,proto3" json:"checksum,omitempty"`
}

func (m *Charity) Reset()         { *m = Charity{} }
func (m *Charity) String() string { return proto.CompactTextString(m) }
func (*Charity) ProtoMessage()    {}
func (*Charity) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b141662e81c4bb5, []int{0}
}
func (m *Charity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Charity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Charity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Charity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Charity.Merge(m, src)
}
func (m *Charity) XXX_Size() int {
	return m.Size()
}
func (m *Charity) XXX_DiscardUnknown() {
	xxx_messageInfo_Charity.DiscardUnknown(m)
}

var xxx_messageInfo_Charity proto.InternalMessageInfo

func (m *Charity) GetCharityName() string {
	if m != nil {
		return m.CharityName
	}
	return ""
}

func (m *Charity) GetAccAddress() string {
	if m != nil {
		return m.AccAddress
	}
	return ""
}

func (m *Charity) GetChecksum() string {
	if m != nil {
		return m.Checksum
	}
	return ""
}

// Params defines parameters of the charity module able to be changed by governance proposals
type Params struct {
	Charities []Charity                              `protobuf:"bytes,1,rep,name=charities,proto3" json:"charities"`
	TaxRate   github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=tax_rate,json=taxRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"tax_rate"`
	// Tax_caps represent max tax amount for each denom
	TaxCaps []TaxCap `protobuf:"bytes,3,rep,name=tax_caps,json=taxCaps,proto3" json:"tax_caps"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b141662e81c4bb5, []int{1}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetCharities() []Charity {
	if m != nil {
		return m.Charities
	}
	return nil
}

func (m *Params) GetTaxCaps() []TaxCap {
	if m != nil {
		return m.TaxCaps
	}
	return nil
}

// TaxCap defines a tax cap for a denom
type TaxCap struct {
	Denom string                                 `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Cap   github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=Cap,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"Cap"`
}

func (m *TaxCap) Reset()         { *m = TaxCap{} }
func (m *TaxCap) String() string { return proto.CompactTextString(m) }
func (*TaxCap) ProtoMessage()    {}
func (*TaxCap) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b141662e81c4bb5, []int{2}
}
func (m *TaxCap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaxCap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaxCap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaxCap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaxCap.Merge(m, src)
}
func (m *TaxCap) XXX_Size() int {
	return m.Size()
}
func (m *TaxCap) XXX_DiscardUnknown() {
	xxx_messageInfo_TaxCap.DiscardUnknown(m)
}

var xxx_messageInfo_TaxCap proto.InternalMessageInfo

func (m *TaxCap) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

// TaxRateLimits defines upper and lower limits to the tax_rate
type TaxRateLimits struct {
	RateMin github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=rate_min,json=rateMin,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"rate_min"`
	RateMax github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=rate_max,json=rateMax,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"rate_max"`
}

func (m *TaxRateLimits) Reset()         { *m = TaxRateLimits{} }
func (m *TaxRateLimits) String() string { return proto.CompactTextString(m) }
func (*TaxRateLimits) ProtoMessage()    {}
func (*TaxRateLimits) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b141662e81c4bb5, []int{3}
}
func (m *TaxRateLimits) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaxRateLimits) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaxRateLimits.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaxRateLimits) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaxRateLimits.Merge(m, src)
}
func (m *TaxRateLimits) XXX_Size() int {
	return m.Size()
}
func (m *TaxRateLimits) XXX_DiscardUnknown() {
	xxx_messageInfo_TaxRateLimits.DiscardUnknown(m)
}

var xxx_messageInfo_TaxRateLimits proto.InternalMessageInfo

// CollectionPeriod defines the record of each tax collection period
type CollectionPeriod struct {
	Period uint64 `protobuf:"varint,1,opt,name=period,proto3" json:"period,omitempty"`
	// Tax collected during entire period
	TaxCollected github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,2,rep,name=tax_collected,json=taxCollected,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coin" json:"tax_collected"`
	// Amount paid out to target charities
	Payouts []Payout `protobuf:"bytes,3,rep,name=payouts,proto3" json:"payouts"`
}

func (m *CollectionPeriod) Reset()         { *m = CollectionPeriod{} }
func (m *CollectionPeriod) String() string { return proto.CompactTextString(m) }
func (*CollectionPeriod) ProtoMessage()    {}
func (*CollectionPeriod) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b141662e81c4bb5, []int{4}
}
func (m *CollectionPeriod) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CollectionPeriod) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CollectionPeriod.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CollectionPeriod) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollectionPeriod.Merge(m, src)
}
func (m *CollectionPeriod) XXX_Size() int {
	return m.Size()
}
func (m *CollectionPeriod) XXX_DiscardUnknown() {
	xxx_messageInfo_CollectionPeriod.DiscardUnknown(m)
}

var xxx_messageInfo_CollectionPeriod proto.InternalMessageInfo

func (m *CollectionPeriod) GetPeriod() uint64 {
	if m != nil {
		return m.Period
	}
	return 0
}

func (m *CollectionPeriod) GetTaxCollected() github_com_cosmos_cosmos_sdk_types.Coin {
	if m != nil {
		return m.TaxCollected
	}
	return nil
}

func (m *CollectionPeriod) GetPayouts() []Payout {
	if m != nil {
		return m.Payouts
	}
	return nil
}

// Payout defines a payment to a charity
type Payout struct {
	Denom         string                                 `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Amount        github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
	Recipientaddr string                                 `protobuf:"bytes,3,opt,name=recipientaddr,proto3" json:"recipientaddr,omitempty"`
}

func (m *Payout) Reset()         { *m = Payout{} }
func (m *Payout) String() string { return proto.CompactTextString(m) }
func (*Payout) ProtoMessage()    {}
func (*Payout) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b141662e81c4bb5, []int{5}
}
func (m *Payout) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Payout) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Payout.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Payout) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Payout.Merge(m, src)
}
func (m *Payout) XXX_Size() int {
	return m.Size()
}
func (m *Payout) XXX_DiscardUnknown() {
	xxx_messageInfo_Payout.DiscardUnknown(m)
}

var xxx_messageInfo_Payout proto.InternalMessageInfo

func (m *Payout) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *Payout) GetRecipientaddr() string {
	if m != nil {
		return m.Recipientaddr
	}
	return ""
}

func init() {
	proto.RegisterType((*Charity)(nil), "user.encichain.charity.Charity")
	proto.RegisterType((*Params)(nil), "user.encichain.charity.Params")
	proto.RegisterType((*TaxCap)(nil), "user.encichain.charity.TaxCap")
	proto.RegisterType((*TaxRateLimits)(nil), "user.encichain.charity.TaxRateLimits")
	proto.RegisterType((*CollectionPeriod)(nil), "user.encichain.charity.CollectionPeriod")
	proto.RegisterType((*Payout)(nil), "user.encichain.charity.Payout")
}

func init() { proto.RegisterFile("charity/charity.proto", fileDescriptor_5b141662e81c4bb5) }

var fileDescriptor_5b141662e81c4bb5 = []byte{
	// 541 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xcb, 0x6e, 0x13, 0x31,
	0x14, 0xcd, 0x34, 0x25, 0x69, 0xdd, 0x46, 0x42, 0x56, 0xa9, 0x86, 0x2c, 0x26, 0x65, 0x84, 0xa0,
	0x2c, 0xf0, 0xa8, 0xb0, 0xe7, 0x91, 0x41, 0x48, 0x95, 0x00, 0x45, 0xa3, 0xae, 0xd8, 0x84, 0x1b,
	0x8f, 0x95, 0x58, 0xed, 0xd8, 0xa3, 0xb1, 0x83, 0x26, 0xff, 0xc0, 0x82, 0x9f, 0x60, 0xc3, 0x97,
	0x74, 0xd9, 0x25, 0x0f, 0xa9, 0xa0, 0xe4, 0x47, 0x90, 0x1f, 0x69, 0x8b, 0x44, 0x05, 0x64, 0x35,
	0xb6, 0xef, 0x3d, 0xe7, 0x9e, 0x73, 0xaf, 0xc7, 0xe8, 0x16, 0x9d, 0x40, 0xc5, 0xf5, 0x2c, 0xf1,
	0x5f, 0x52, 0x56, 0x52, 0x4b, 0xbc, 0x3b, 0x55, 0xac, 0x22, 0x4c, 0x50, 0x4e, 0x27, 0xc0, 0x05,
	0xf1, 0xd1, 0xee, 0xce, 0x58, 0x8e, 0xa5, 0x4d, 0x49, 0xcc, 0xca, 0x65, 0x77, 0x23, 0x2a, 0x55,
	0x21, 0x55, 0x32, 0x02, 0xc5, 0x92, 0xf7, 0x07, 0x23, 0xa6, 0xe1, 0x20, 0xa1, 0x92, 0x0b, 0x17,
	0x8f, 0x27, 0xa8, 0x9d, 0x3a, 0x02, 0x7c, 0x07, 0x6d, 0x7b, 0xae, 0xa1, 0x80, 0x82, 0x85, 0xc1,
	0x5e, 0xb0, 0xbf, 0x99, 0x6d, 0xf9, 0xb3, 0x37, 0x50, 0x30, 0x1c, 0x21, 0x04, 0x94, 0x3e, 0xcf,
	0xf3, 0x8a, 0x29, 0x15, 0xae, 0xd9, 0x84, 0x2b, 0x27, 0xb8, 0x8b, 0x36, 0xe8, 0x84, 0xd1, 0x63,
	0x35, 0x2d, 0xc2, 0xa6, 0x8d, 0x5e, 0xec, 0xe3, 0xaf, 0x01, 0x6a, 0x0d, 0xa0, 0x82, 0x42, 0xe1,
	0x14, 0x6d, 0x3a, 0x56, 0xce, 0x54, 0x18, 0xec, 0x35, 0xf7, 0xb7, 0x1e, 0xf5, 0xc8, 0x9f, 0x6d,
	0x11, 0xaf, 0xae, 0xbf, 0x7e, 0x7a, 0xde, 0x6b, 0x64, 0x97, 0x38, 0x7c, 0x88, 0x36, 0x34, 0xd4,
	0xc3, 0x0a, 0x34, 0x73, 0x4a, 0xfa, 0xc4, 0xa4, 0x7c, 0x3b, 0xef, 0xdd, 0x1b, 0x73, 0x3d, 0x99,
	0x8e, 0x08, 0x95, 0x45, 0xe2, 0xed, 0xbb, 0xcf, 0x43, 0x95, 0x1f, 0x27, 0x7a, 0x56, 0x32, 0x45,
	0x5e, 0x30, 0x9a, 0xb5, 0x35, 0xd4, 0x19, 0x68, 0x86, 0x9f, 0x3a, 0x2a, 0x0a, 0xa5, 0x0a, 0x9b,
	0x56, 0x4e, 0x74, 0x9d, 0x9c, 0x23, 0xa8, 0x53, 0x28, 0xbd, 0x1a, 0x43, 0x90, 0x42, 0xa9, 0xe2,
	0x77, 0xa8, 0xe5, 0x02, 0x78, 0x07, 0xdd, 0xc8, 0x99, 0x90, 0x85, 0xef, 0x9e, 0xdb, 0xe0, 0x67,
	0xa8, 0x99, 0x42, 0xb9, 0x82, 0xcc, 0x43, 0xa1, 0x33, 0x03, 0x8d, 0x3f, 0x05, 0xa8, 0x73, 0xe4,
	0xe4, 0xbe, 0xe2, 0x05, 0xd7, 0xd6, 0xbf, 0xf1, 0x3e, 0x2c, 0xb8, 0x70, 0xc5, 0xfe, 0xdf, 0xbf,
	0xc1, 0xbf, 0xe6, 0xe2, 0x92, 0x0a, 0xea, 0x55, 0x5b, 0x69, 0xa9, 0xa0, 0x8e, 0xbf, 0x07, 0xe8,
	0x66, 0x2a, 0x4f, 0x4e, 0x18, 0xd5, 0x5c, 0x8a, 0x01, 0xab, 0xb8, 0xcc, 0xf1, 0x2e, 0x6a, 0x95,
	0x76, 0x65, 0x85, 0xae, 0x67, 0x7e, 0x87, 0x25, 0xea, 0xd8, 0xbe, 0xbb, 0x7c, 0x96, 0x87, 0x6b,
	0xb6, 0xf9, 0xb7, 0x89, 0xab, 0x41, 0xcc, 0xa5, 0x25, 0xfe, 0xd2, 0x92, 0x54, 0x72, 0xd1, 0x4f,
	0x8c, 0xae, 0xcf, 0x3f, 0x7a, 0xf7, 0xff, 0x41, 0x97, 0x01, 0x64, 0xdb, 0x66, 0x44, 0x4b, 0x7e,
	0xfc, 0x04, 0xb5, 0x4b, 0x98, 0xc9, 0xa9, 0xfe, 0xeb, 0x9c, 0x07, 0x36, 0x6d, 0x39, 0x67, 0x0f,
	0x8a, 0x3f, 0xd8, 0x3b, 0x6c, 0xd6, 0xd7, 0x0c, 0xfa, 0x25, 0x6a, 0x41, 0x21, 0xa7, 0x42, 0xaf,
	0x38, 0x6b, 0x8f, 0xc6, 0x77, 0x51, 0xa7, 0x62, 0x94, 0x97, 0x9c, 0x09, 0x0d, 0x79, 0x5e, 0xf9,
	0xbf, 0xe9, 0xf7, 0xc3, 0x7e, 0x7a, 0x3a, 0x8f, 0x82, 0xb3, 0x79, 0x14, 0xfc, 0x9c, 0x47, 0xc1,
	0xc7, 0x45, 0xd4, 0x38, 0x5b, 0x44, 0x8d, 0x2f, 0x8b, 0xa8, 0xf1, 0xf6, 0xc1, 0x95, 0x7a, 0xc6,
	0x61, 0x72, 0xe1, 0x30, 0xa9, 0x97, 0xef, 0x89, 0x2b, 0x3b, 0x6a, 0xd9, 0x87, 0xe0, 0xf1, 0xaf,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x02, 0xa2, 0x51, 0x2d, 0x6f, 0x04, 0x00, 0x00,
}

func (m *Charity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Charity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Charity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Checksum) > 0 {
		i -= len(m.Checksum)
		copy(dAtA[i:], m.Checksum)
		i = encodeVarintCharity(dAtA, i, uint64(len(m.Checksum)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AccAddress) > 0 {
		i -= len(m.AccAddress)
		copy(dAtA[i:], m.AccAddress)
		i = encodeVarintCharity(dAtA, i, uint64(len(m.AccAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CharityName) > 0 {
		i -= len(m.CharityName)
		copy(dAtA[i:], m.CharityName)
		i = encodeVarintCharity(dAtA, i, uint64(len(m.CharityName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TaxCaps) > 0 {
		for iNdEx := len(m.TaxCaps) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TaxCaps[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCharity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size := m.TaxRate.Size()
		i -= size
		if _, err := m.TaxRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCharity(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Charities) > 0 {
		for iNdEx := len(m.Charities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Charities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCharity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TaxCap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaxCap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaxCap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Cap.Size()
		i -= size
		if _, err := m.Cap.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCharity(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintCharity(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TaxRateLimits) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaxRateLimits) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaxRateLimits) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.RateMax.Size()
		i -= size
		if _, err := m.RateMax.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCharity(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.RateMin.Size()
		i -= size
		if _, err := m.RateMin.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCharity(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CollectionPeriod) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CollectionPeriod) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CollectionPeriod) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Payouts) > 0 {
		for iNdEx := len(m.Payouts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Payouts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCharity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.TaxCollected) > 0 {
		for iNdEx := len(m.TaxCollected) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TaxCollected[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCharity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Period != 0 {
		i = encodeVarintCharity(dAtA, i, uint64(m.Period))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Payout) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Payout) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Payout) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Recipientaddr) > 0 {
		i -= len(m.Recipientaddr)
		copy(dAtA[i:], m.Recipientaddr)
		i = encodeVarintCharity(dAtA, i, uint64(len(m.Recipientaddr)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCharity(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintCharity(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCharity(dAtA []byte, offset int, v uint64) int {
	offset -= sovCharity(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Charity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CharityName)
	if l > 0 {
		n += 1 + l + sovCharity(uint64(l))
	}
	l = len(m.AccAddress)
	if l > 0 {
		n += 1 + l + sovCharity(uint64(l))
	}
	l = len(m.Checksum)
	if l > 0 {
		n += 1 + l + sovCharity(uint64(l))
	}
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Charities) > 0 {
		for _, e := range m.Charities {
			l = e.Size()
			n += 1 + l + sovCharity(uint64(l))
		}
	}
	l = m.TaxRate.Size()
	n += 1 + l + sovCharity(uint64(l))
	if len(m.TaxCaps) > 0 {
		for _, e := range m.TaxCaps {
			l = e.Size()
			n += 1 + l + sovCharity(uint64(l))
		}
	}
	return n
}

func (m *TaxCap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovCharity(uint64(l))
	}
	l = m.Cap.Size()
	n += 1 + l + sovCharity(uint64(l))
	return n
}

func (m *TaxRateLimits) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.RateMin.Size()
	n += 1 + l + sovCharity(uint64(l))
	l = m.RateMax.Size()
	n += 1 + l + sovCharity(uint64(l))
	return n
}

func (m *CollectionPeriod) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Period != 0 {
		n += 1 + sovCharity(uint64(m.Period))
	}
	if len(m.TaxCollected) > 0 {
		for _, e := range m.TaxCollected {
			l = e.Size()
			n += 1 + l + sovCharity(uint64(l))
		}
	}
	if len(m.Payouts) > 0 {
		for _, e := range m.Payouts {
			l = e.Size()
			n += 1 + l + sovCharity(uint64(l))
		}
	}
	return n
}

func (m *Payout) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovCharity(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovCharity(uint64(l))
	l = len(m.Recipientaddr)
	if l > 0 {
		n += 1 + l + sovCharity(uint64(l))
	}
	return n
}

func sovCharity(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCharity(x uint64) (n int) {
	return sovCharity(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Charity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCharity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Charity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Charity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CharityName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCharity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCharity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCharity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CharityName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCharity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCharity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCharity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checksum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCharity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCharity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCharity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Checksum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCharity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCharity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCharity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Charities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCharity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCharity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCharity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Charities = append(m.Charities, Charity{})
			if err := m.Charities[len(m.Charities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaxRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCharity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCharity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCharity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TaxRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaxCaps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCharity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCharity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCharity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaxCaps = append(m.TaxCaps, TaxCap{})
			if err := m.TaxCaps[len(m.TaxCaps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCharity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCharity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaxCap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCharity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaxCap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaxCap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCharity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCharity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCharity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cap", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCharity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCharity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCharity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Cap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCharity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCharity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaxRateLimits) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCharity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaxRateLimits: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaxRateLimits: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateMin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCharity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCharity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCharity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RateMin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateMax", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCharity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCharity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCharity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RateMax.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCharity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCharity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CollectionPeriod) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCharity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CollectionPeriod: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CollectionPeriod: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Period", wireType)
			}
			m.Period = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCharity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Period |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaxCollected", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCharity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCharity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCharity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaxCollected = append(m.TaxCollected, types.Coin{})
			if err := m.TaxCollected[len(m.TaxCollected)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payouts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCharity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCharity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCharity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payouts = append(m.Payouts, Payout{})
			if err := m.Payouts[len(m.Payouts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCharity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCharity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Payout) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCharity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Payout: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Payout: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCharity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCharity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCharity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCharity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCharity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCharity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipientaddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCharity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCharity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCharity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipientaddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCharity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCharity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCharity(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCharity
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCharity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCharity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCharity
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCharity
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCharity
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCharity        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCharity          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCharity = fmt.Errorf("proto: unexpected end of group")
)
