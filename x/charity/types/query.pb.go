// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: enci/charity/v1beta1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryTaxRateRequest is the request type for the Query TaxRate Request RPC method
type QueryTaxRateRequest struct {
}

func (m *QueryTaxRateRequest) Reset()         { *m = QueryTaxRateRequest{} }
func (m *QueryTaxRateRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTaxRateRequest) ProtoMessage()    {}
func (*QueryTaxRateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5a81d6118f722a7, []int{0}
}
func (m *QueryTaxRateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTaxRateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTaxRateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTaxRateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTaxRateRequest.Merge(m, src)
}
func (m *QueryTaxRateRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTaxRateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTaxRateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTaxRateRequest proto.InternalMessageInfo

// QueryTaxRateResponse is the response type for the Query TaxRate Request RPC method
type QueryTaxRateResponse struct {
	TaxRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=tax_rate,json=taxRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"tax_rate"`
}

func (m *QueryTaxRateResponse) Reset()         { *m = QueryTaxRateResponse{} }
func (m *QueryTaxRateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTaxRateResponse) ProtoMessage()    {}
func (*QueryTaxRateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5a81d6118f722a7, []int{1}
}
func (m *QueryTaxRateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTaxRateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTaxRateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTaxRateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTaxRateResponse.Merge(m, src)
}
func (m *QueryTaxRateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTaxRateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTaxRateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTaxRateResponse proto.InternalMessageInfo

// QueryParamsRequest is the request type for the Query Params Request RPC method
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5a81d6118f722a7, []int{2}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is the response type for the Query Params Request RPC method
type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5a81d6118f722a7, []int{3}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryCharitiesRequest is the request type for the Query Charity Request RPC method
type QueryCharitiesRequest struct {
}

func (m *QueryCharitiesRequest) Reset()         { *m = QueryCharitiesRequest{} }
func (m *QueryCharitiesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCharitiesRequest) ProtoMessage()    {}
func (*QueryCharitiesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5a81d6118f722a7, []int{4}
}
func (m *QueryCharitiesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCharitiesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCharitiesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCharitiesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCharitiesRequest.Merge(m, src)
}
func (m *QueryCharitiesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCharitiesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCharitiesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCharitiesRequest proto.InternalMessageInfo

// QueryCharitiesResponse is the response type for the Query Charity Request RPC method
type QueryCharitiesResponse struct {
	Charity []Charity `protobuf:"bytes,1,rep,name=charity,proto3" json:"charity"`
}

func (m *QueryCharitiesResponse) Reset()         { *m = QueryCharitiesResponse{} }
func (m *QueryCharitiesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCharitiesResponse) ProtoMessage()    {}
func (*QueryCharitiesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5a81d6118f722a7, []int{5}
}
func (m *QueryCharitiesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCharitiesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCharitiesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCharitiesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCharitiesResponse.Merge(m, src)
}
func (m *QueryCharitiesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCharitiesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCharitiesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCharitiesResponse proto.InternalMessageInfo

func (m *QueryCharitiesResponse) GetCharity() []Charity {
	if m != nil {
		return m.Charity
	}
	return nil
}

// QueryTaxCapsRequest is the request type for the Query TaxCaps Request gRPC method
// Request type for all taxcaps
type QueryTaxCapsRequest struct {
}

func (m *QueryTaxCapsRequest) Reset()         { *m = QueryTaxCapsRequest{} }
func (m *QueryTaxCapsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTaxCapsRequest) ProtoMessage()    {}
func (*QueryTaxCapsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5a81d6118f722a7, []int{6}
}
func (m *QueryTaxCapsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTaxCapsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTaxCapsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTaxCapsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTaxCapsRequest.Merge(m, src)
}
func (m *QueryTaxCapsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTaxCapsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTaxCapsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTaxCapsRequest proto.InternalMessageInfo

// QueryTaxCapsResponse is the response type for the Query TaxCaps Request gRPC method
type QueryTaxCapsResponse struct {
	TaxCaps []TaxCap `protobuf:"bytes,1,rep,name=tax_caps,json=taxCaps,proto3" json:"tax_caps"`
}

func (m *QueryTaxCapsResponse) Reset()         { *m = QueryTaxCapsResponse{} }
func (m *QueryTaxCapsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTaxCapsResponse) ProtoMessage()    {}
func (*QueryTaxCapsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5a81d6118f722a7, []int{7}
}
func (m *QueryTaxCapsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTaxCapsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTaxCapsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTaxCapsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTaxCapsResponse.Merge(m, src)
}
func (m *QueryTaxCapsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTaxCapsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTaxCapsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTaxCapsResponse proto.InternalMessageInfo

func (m *QueryTaxCapsResponse) GetTaxCaps() []TaxCap {
	if m != nil {
		return m.TaxCaps
	}
	return nil
}

// QueryBurnRateRequest is the request type for the Query BurnRate Request RPC method
type QueryBurnRateRequest struct {
}

func (m *QueryBurnRateRequest) Reset()         { *m = QueryBurnRateRequest{} }
func (m *QueryBurnRateRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBurnRateRequest) ProtoMessage()    {}
func (*QueryBurnRateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5a81d6118f722a7, []int{8}
}
func (m *QueryBurnRateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBurnRateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBurnRateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBurnRateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBurnRateRequest.Merge(m, src)
}
func (m *QueryBurnRateRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBurnRateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBurnRateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBurnRateRequest proto.InternalMessageInfo

// QueryBurnRateResponse is the response type for the Query BurnRate Request RPC method
type QueryBurnRateResponse struct {
	BurnRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=burn_rate,json=burnRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"burn_rate"`
}

func (m *QueryBurnRateResponse) Reset()         { *m = QueryBurnRateResponse{} }
func (m *QueryBurnRateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBurnRateResponse) ProtoMessage()    {}
func (*QueryBurnRateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5a81d6118f722a7, []int{9}
}
func (m *QueryBurnRateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBurnRateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBurnRateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBurnRateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBurnRateResponse.Merge(m, src)
}
func (m *QueryBurnRateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBurnRateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBurnRateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBurnRateResponse proto.InternalMessageInfo

// QueryTaxCapRequest is the request type for the Query TaxCap Request RPC method
// Request type for a single denom taxcap
type QueryTaxCapRequest struct {
	// denom defines the requested denom for the request
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryTaxCapRequest) Reset()         { *m = QueryTaxCapRequest{} }
func (m *QueryTaxCapRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTaxCapRequest) ProtoMessage()    {}
func (*QueryTaxCapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5a81d6118f722a7, []int{10}
}
func (m *QueryTaxCapRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTaxCapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTaxCapRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTaxCapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTaxCapRequest.Merge(m, src)
}
func (m *QueryTaxCapRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTaxCapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTaxCapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTaxCapRequest proto.InternalMessageInfo

func (m *QueryTaxCapRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

// QueryTaxCapResponse is the response type for the Query TaxCap Request gRPC method
type QueryTaxCapResponse struct {
	Cap github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=Cap,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"Cap"`
}

func (m *QueryTaxCapResponse) Reset()         { *m = QueryTaxCapResponse{} }
func (m *QueryTaxCapResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTaxCapResponse) ProtoMessage()    {}
func (*QueryTaxCapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5a81d6118f722a7, []int{11}
}
func (m *QueryTaxCapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTaxCapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTaxCapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTaxCapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTaxCapResponse.Merge(m, src)
}
func (m *QueryTaxCapResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTaxCapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTaxCapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTaxCapResponse proto.InternalMessageInfo

// QueryTaxProceedsRequest is the request type for the Query TaxProceeds RPC method.
type QueryTaxProceedsRequest struct {
}

func (m *QueryTaxProceedsRequest) Reset()         { *m = QueryTaxProceedsRequest{} }
func (m *QueryTaxProceedsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTaxProceedsRequest) ProtoMessage()    {}
func (*QueryTaxProceedsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5a81d6118f722a7, []int{12}
}
func (m *QueryTaxProceedsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTaxProceedsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTaxProceedsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTaxProceedsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTaxProceedsRequest.Merge(m, src)
}
func (m *QueryTaxProceedsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTaxProceedsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTaxProceedsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTaxProceedsRequest proto.InternalMessageInfo

// QueryTaxProceedsResponse is response type for the Query TaxProceeds RPC method
type QueryTaxProceedsResponse struct {
	TaxProceeds github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=tax_proceeds,json=taxProceeds,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"tax_proceeds"`
}

func (m *QueryTaxProceedsResponse) Reset()         { *m = QueryTaxProceedsResponse{} }
func (m *QueryTaxProceedsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTaxProceedsResponse) ProtoMessage()    {}
func (*QueryTaxProceedsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5a81d6118f722a7, []int{13}
}
func (m *QueryTaxProceedsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTaxProceedsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTaxProceedsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTaxProceedsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTaxProceedsResponse.Merge(m, src)
}
func (m *QueryTaxProceedsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTaxProceedsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTaxProceedsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTaxProceedsResponse proto.InternalMessageInfo

func (m *QueryTaxProceedsResponse) GetTaxProceeds() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.TaxProceeds
	}
	return nil
}

// QueryTaxRateLimitsRequest is the request type for the Query TaxRateLimits Request gRPC method
type QueryTaxRateLimitsRequest struct {
}

func (m *QueryTaxRateLimitsRequest) Reset()         { *m = QueryTaxRateLimitsRequest{} }
func (m *QueryTaxRateLimitsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTaxRateLimitsRequest) ProtoMessage()    {}
func (*QueryTaxRateLimitsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5a81d6118f722a7, []int{14}
}
func (m *QueryTaxRateLimitsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTaxRateLimitsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTaxRateLimitsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTaxRateLimitsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTaxRateLimitsRequest.Merge(m, src)
}
func (m *QueryTaxRateLimitsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTaxRateLimitsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTaxRateLimitsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTaxRateLimitsRequest proto.InternalMessageInfo

// QueryTaxRateLimitsResponse is the response type for the Query TaxRateLimits Request gRPC method
type QueryTaxRateLimitsResponse struct {
	TaxRateLimits TaxRateLimits `protobuf:"bytes,1,opt,name=tax_rate_limits,json=taxRateLimits,proto3" json:"tax_rate_limits"`
}

func (m *QueryTaxRateLimitsResponse) Reset()         { *m = QueryTaxRateLimitsResponse{} }
func (m *QueryTaxRateLimitsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTaxRateLimitsResponse) ProtoMessage()    {}
func (*QueryTaxRateLimitsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5a81d6118f722a7, []int{15}
}
func (m *QueryTaxRateLimitsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTaxRateLimitsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTaxRateLimitsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTaxRateLimitsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTaxRateLimitsResponse.Merge(m, src)
}
func (m *QueryTaxRateLimitsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTaxRateLimitsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTaxRateLimitsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTaxRateLimitsResponse proto.InternalMessageInfo

func (m *QueryTaxRateLimitsResponse) GetTaxRateLimits() TaxRateLimits {
	if m != nil {
		return m.TaxRateLimits
	}
	return TaxRateLimits{}
}

// QueryAllCollectionEpochsRequest is the request type for the QueryAllCollectionEpochs Request gRPC method
type QueryAllCollectionEpochsRequest struct {
}

func (m *QueryAllCollectionEpochsRequest) Reset()         { *m = QueryAllCollectionEpochsRequest{} }
func (m *QueryAllCollectionEpochsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllCollectionEpochsRequest) ProtoMessage()    {}
func (*QueryAllCollectionEpochsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5a81d6118f722a7, []int{16}
}
func (m *QueryAllCollectionEpochsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCollectionEpochsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCollectionEpochsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCollectionEpochsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCollectionEpochsRequest.Merge(m, src)
}
func (m *QueryAllCollectionEpochsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCollectionEpochsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCollectionEpochsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCollectionEpochsRequest proto.InternalMessageInfo

// QueryAllCollectionEpochsResponse is the response type for the QueryAllCollectionEpochs Request gRPC method
type QueryAllCollectionEpochsResponse struct {
	CollectionEpochs []CollectionEpoch `protobuf:"bytes,1,rep,name=collection_epochs,json=collectionEpochs,proto3" json:"collection_epochs"`
}

func (m *QueryAllCollectionEpochsResponse) Reset()         { *m = QueryAllCollectionEpochsResponse{} }
func (m *QueryAllCollectionEpochsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllCollectionEpochsResponse) ProtoMessage()    {}
func (*QueryAllCollectionEpochsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5a81d6118f722a7, []int{17}
}
func (m *QueryAllCollectionEpochsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCollectionEpochsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCollectionEpochsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCollectionEpochsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCollectionEpochsResponse.Merge(m, src)
}
func (m *QueryAllCollectionEpochsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCollectionEpochsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCollectionEpochsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCollectionEpochsResponse proto.InternalMessageInfo

func (m *QueryAllCollectionEpochsResponse) GetCollectionEpochs() []CollectionEpoch {
	if m != nil {
		return m.CollectionEpochs
	}
	return nil
}

//QueryCollectionEpochRequest is the request type for the Query CollectionEpoch Request RPC method
// Queries a single CollectionEpoch based on *epoch*
type QueryCollectionEpochRequest struct {
	Epoch uint64 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
}

func (m *QueryCollectionEpochRequest) Reset()         { *m = QueryCollectionEpochRequest{} }
func (m *QueryCollectionEpochRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCollectionEpochRequest) ProtoMessage()    {}
func (*QueryCollectionEpochRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5a81d6118f722a7, []int{18}
}
func (m *QueryCollectionEpochRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCollectionEpochRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCollectionEpochRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCollectionEpochRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCollectionEpochRequest.Merge(m, src)
}
func (m *QueryCollectionEpochRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCollectionEpochRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCollectionEpochRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCollectionEpochRequest proto.InternalMessageInfo

func (m *QueryCollectionEpochRequest) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

//QueryCollectionEpochResponse is the response type for the Query CollectionEpoch Request RPC method
// Responds with a single CollectionEpoch based on *epoch*
type QueryCollectionEpochResponse struct {
	CollectionEpoch CollectionEpoch `protobuf:"bytes,1,opt,name=collection_epoch,json=collectionEpoch,proto3" json:"collection_epoch"`
}

func (m *QueryCollectionEpochResponse) Reset()         { *m = QueryCollectionEpochResponse{} }
func (m *QueryCollectionEpochResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCollectionEpochResponse) ProtoMessage()    {}
func (*QueryCollectionEpochResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5a81d6118f722a7, []int{19}
}
func (m *QueryCollectionEpochResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCollectionEpochResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCollectionEpochResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCollectionEpochResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCollectionEpochResponse.Merge(m, src)
}
func (m *QueryCollectionEpochResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCollectionEpochResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCollectionEpochResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCollectionEpochResponse proto.InternalMessageInfo

func (m *QueryCollectionEpochResponse) GetCollectionEpoch() CollectionEpoch {
	if m != nil {
		return m.CollectionEpoch
	}
	return CollectionEpoch{}
}

func init() {
	proto.RegisterType((*QueryTaxRateRequest)(nil), "enci.charity.v1beta1.QueryTaxRateRequest")
	proto.RegisterType((*QueryTaxRateResponse)(nil), "enci.charity.v1beta1.QueryTaxRateResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "enci.charity.v1beta1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "enci.charity.v1beta1.QueryParamsResponse")
	proto.RegisterType((*QueryCharitiesRequest)(nil), "enci.charity.v1beta1.QueryCharitiesRequest")
	proto.RegisterType((*QueryCharitiesResponse)(nil), "enci.charity.v1beta1.QueryCharitiesResponse")
	proto.RegisterType((*QueryTaxCapsRequest)(nil), "enci.charity.v1beta1.QueryTaxCapsRequest")
	proto.RegisterType((*QueryTaxCapsResponse)(nil), "enci.charity.v1beta1.QueryTaxCapsResponse")
	proto.RegisterType((*QueryBurnRateRequest)(nil), "enci.charity.v1beta1.QueryBurnRateRequest")
	proto.RegisterType((*QueryBurnRateResponse)(nil), "enci.charity.v1beta1.QueryBurnRateResponse")
	proto.RegisterType((*QueryTaxCapRequest)(nil), "enci.charity.v1beta1.QueryTaxCapRequest")
	proto.RegisterType((*QueryTaxCapResponse)(nil), "enci.charity.v1beta1.QueryTaxCapResponse")
	proto.RegisterType((*QueryTaxProceedsRequest)(nil), "enci.charity.v1beta1.QueryTaxProceedsRequest")
	proto.RegisterType((*QueryTaxProceedsResponse)(nil), "enci.charity.v1beta1.QueryTaxProceedsResponse")
	proto.RegisterType((*QueryTaxRateLimitsRequest)(nil), "enci.charity.v1beta1.QueryTaxRateLimitsRequest")
	proto.RegisterType((*QueryTaxRateLimitsResponse)(nil), "enci.charity.v1beta1.QueryTaxRateLimitsResponse")
	proto.RegisterType((*QueryAllCollectionEpochsRequest)(nil), "enci.charity.v1beta1.QueryAllCollectionEpochsRequest")
	proto.RegisterType((*QueryAllCollectionEpochsResponse)(nil), "enci.charity.v1beta1.QueryAllCollectionEpochsResponse")
	proto.RegisterType((*QueryCollectionEpochRequest)(nil), "enci.charity.v1beta1.QueryCollectionEpochRequest")
	proto.RegisterType((*QueryCollectionEpochResponse)(nil), "enci.charity.v1beta1.QueryCollectionEpochResponse")
}

func init() { proto.RegisterFile("enci/charity/v1beta1/query.proto", fileDescriptor_e5a81d6118f722a7) }

var fileDescriptor_e5a81d6118f722a7 = []byte{
	// 973 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x96, 0xcf, 0x6f, 0xdc, 0x44,
	0x14, 0xc7, 0x63, 0xda, 0xe6, 0xc7, 0x5b, 0xaa, 0x84, 0x61, 0xdb, 0x26, 0x6e, 0xea, 0xdd, 0x38,
	0x24, 0xdd, 0x34, 0xc4, 0x4e, 0x52, 0xd1, 0x03, 0x12, 0x12, 0xec, 0xc2, 0xa1, 0x82, 0x43, 0xb3,
	0x02, 0x8a, 0xb8, 0x44, 0xb3, 0xce, 0x68, 0x63, 0xb1, 0xeb, 0x71, 0xd7, 0xb3, 0x55, 0xa2, 0xd2,
	0x0b, 0x1c, 0x90, 0x00, 0x09, 0x24, 0x0e, 0x1c, 0xb9, 0x73, 0x82, 0xff, 0xa2, 0xc7, 0x4a, 0x5c,
	0x10, 0x87, 0x82, 0x12, 0xfe, 0x03, 0xfe, 0x01, 0x34, 0x33, 0xcf, 0x5e, 0xaf, 0xe3, 0x75, 0x1c,
	0x38, 0xed, 0x7a, 0xe6, 0xbd, 0xf7, 0xfd, 0xf8, 0xcd, 0xcc, 0x77, 0x0c, 0x75, 0x16, 0x78, 0xbe,
	0xeb, 0x1d, 0xd2, 0x81, 0x2f, 0x8e, 0xdd, 0xc7, 0x3b, 0x1d, 0x26, 0xe8, 0x8e, 0xfb, 0x68, 0xc8,
	0x06, 0xc7, 0x4e, 0x38, 0xe0, 0x82, 0x93, 0xaa, 0x8c, 0x70, 0x30, 0xc2, 0xc1, 0x08, 0x73, 0xb9,
	0xcb, 0x79, 0xb7, 0xc7, 0x5c, 0x1a, 0xfa, 0x2e, 0x0d, 0x02, 0x2e, 0xa8, 0xf0, 0x79, 0x10, 0xe9,
	0x1c, 0xb3, 0xda, 0xe5, 0x5d, 0xae, 0xfe, 0xba, 0xf2, 0x1f, 0x8e, 0xda, 0xb9, 0x5a, 0x71, 0x65,
	0x1d, 0x63, 0x79, 0x3c, 0xea, 0xf3, 0xc8, 0xed, 0xd0, 0x88, 0x8d, 0x42, 0xb8, 0x1f, 0xe8, 0x79,
	0xfb, 0x1a, 0xbc, 0xba, 0x27, 0xe1, 0x3e, 0xa4, 0x47, 0x6d, 0x2a, 0x58, 0x9b, 0x3d, 0x1a, 0xb2,
	0x48, 0xd8, 0x14, 0xaa, 0xe3, 0xc3, 0x51, 0xc8, 0x83, 0x88, 0x91, 0xfb, 0x30, 0x2b, 0xe8, 0xd1,
	0xfe, 0x80, 0x0a, 0xb6, 0x68, 0xd4, 0x8d, 0xc6, 0x5c, 0xd3, 0x79, 0xf6, 0xa2, 0x36, 0xf5, 0xc7,
	0x8b, 0xda, 0x7a, 0xd7, 0x17, 0x87, 0xc3, 0x8e, 0xe3, 0xf1, 0xbe, 0x8b, 0x9a, 0xfa, 0x67, 0x2b,
	0x3a, 0xf8, 0xcc, 0x15, 0xc7, 0x21, 0x8b, 0x9c, 0x77, 0x99, 0xd7, 0x9e, 0x11, 0xba, 0xa4, 0x5d,
	0x05, 0xa2, 0x24, 0x1e, 0xd0, 0x01, 0xed, 0x47, 0xb1, 0xf0, 0x1e, 0xf2, 0xc4, 0xa3, 0xa8, 0xfb,
	0x26, 0x4c, 0x87, 0x6a, 0x44, 0xa9, 0x56, 0x76, 0x97, 0x9d, 0xbc, 0x2e, 0x3a, 0x3a, 0xab, 0x79,
	0x59, 0x32, 0xb5, 0x31, 0xc3, 0xbe, 0x01, 0xd7, 0x54, 0xc9, 0x96, 0x0a, 0xf6, 0x59, 0xa2, 0xf5,
	0x10, 0xae, 0x67, 0x27, 0x50, 0xee, 0x2d, 0x98, 0xc1, 0xd2, 0x8b, 0x46, 0xfd, 0x52, 0xa3, 0xb2,
	0x7b, 0x2b, 0x5f, 0x4f, 0x67, 0x1e, 0xa3, 0x60, 0x9c, 0x93, 0x6e, 0x6a, 0x8b, 0x86, 0x89, 0xde,
	0x47, 0xa3, 0xa6, 0xea, 0xe1, 0x44, 0x4d, 0x35, 0xd5, 0xa3, 0x61, 0x84, 0x72, 0x13, 0x5e, 0x4f,
	0x27, 0xc6, 0x6a, 0x42, 0x97, 0xb1, 0xaf, 0x63, 0xd9, 0xe6, 0x70, 0x10, 0xa4, 0xd7, 0xf0, 0x00,
	0xdf, 0x7b, 0x34, 0x8e, 0x7a, 0xef, 0xc3, 0x5c, 0x67, 0x38, 0x08, 0xfe, 0xcf, 0x2a, 0xce, 0x76,
	0xb0, 0xa8, 0x7d, 0x07, 0x97, 0x51, 0xb3, 0xa1, 0x36, 0xa9, 0xc2, 0x95, 0x03, 0x16, 0xf0, 0xbe,
	0x2e, 0xdf, 0xd6, 0x0f, 0xf6, 0xc3, 0xb1, 0xbe, 0x24, 0x3c, 0x6f, 0xc3, 0xa5, 0x16, 0x0d, 0xff,
	0x03, 0xc9, 0xfd, 0x40, 0xb4, 0x65, 0xaa, 0xbd, 0x04, 0x37, 0xe2, 0xc2, 0x0f, 0x06, 0xdc, 0x63,
	0xec, 0x20, 0x69, 0xfa, 0xd7, 0x06, 0x2c, 0x9e, 0x9d, 0x43, 0xe5, 0x00, 0x5e, 0x96, 0x9d, 0x0f,
	0x71, 0x1c, 0xbb, 0xbf, 0xe4, 0x68, 0x25, 0x47, 0x1e, 0x9a, 0xd1, 0x5a, 0x73, 0x3f, 0x68, 0x6e,
	0x4b, 0xba, 0x9f, 0xff, 0xac, 0x35, 0x4a, 0xd0, 0xc9, 0x84, 0xa8, 0x5d, 0x11, 0x23, 0x5d, 0xfb,
	0x26, 0x2c, 0xa5, 0x8f, 0xd5, 0x07, 0x7e, 0xdf, 0x17, 0x09, 0x29, 0x07, 0x33, 0x6f, 0x12, 0x51,
	0xf7, 0x60, 0x3e, 0x3e, 0x79, 0xfb, 0x3d, 0x35, 0x85, 0x47, 0x61, 0x75, 0xe2, 0x5e, 0x19, 0x55,
	0xc1, 0x2d, 0x73, 0x55, 0xa4, 0x07, 0xed, 0x15, 0xa8, 0x29, 0xc1, 0x77, 0x7a, 0xbd, 0x16, 0xef,
	0xf5, 0x98, 0x27, 0x2d, 0xe7, 0xbd, 0x90, 0x7b, 0x87, 0x09, 0xd3, 0xe7, 0x50, 0x9f, 0x1c, 0x82,
	0x64, 0x9f, 0xc0, 0x2b, 0x5e, 0x32, 0xb7, 0xcf, 0xd4, 0x24, 0x76, 0x72, 0x6d, 0xc2, 0xb1, 0x19,
	0x2f, 0x85, 0x74, 0x0b, 0x5e, 0x46, 0xc1, 0xbe, 0x0b, 0x37, 0xf5, 0x01, 0x1d, 0x9f, 0x48, 0x6d,
	0x32, 0xa5, 0xa6, 0x1a, 0x71, 0xb9, 0xad, 0x1f, 0xec, 0xc7, 0xb0, 0x9c, 0x9f, 0x84, 0xb8, 0x1f,
	0xc3, 0x42, 0x16, 0x17, 0x3b, 0x79, 0x21, 0xda, 0xf9, 0x0c, 0xed, 0xee, 0x3f, 0x15, 0xb8, 0xa2,
	0x84, 0xc9, 0x97, 0x06, 0x4c, 0x6b, 0x27, 0x22, 0x8d, 0xfc, 0x92, 0x67, 0x8d, 0xcf, 0xdc, 0x28,
	0x11, 0xa9, 0xdf, 0xc0, 0x7e, 0xed, 0x8b, 0xdf, 0xfe, 0xfe, 0xe1, 0x25, 0x8b, 0x2c, 0xbb, 0xb9,
	0x17, 0x80, 0xb6, 0x3d, 0xf2, 0x95, 0x01, 0x33, 0xb8, 0x09, 0x48, 0x51, 0xf1, 0x71, 0xe7, 0x37,
	0xef, 0x94, 0x09, 0x45, 0x90, 0x35, 0x05, 0x52, 0x23, 0xb7, 0xf2, 0x41, 0x04, 0x3d, 0x92, 0xdb,
	0x95, 0x7c, 0x67, 0xc0, 0x5c, 0xe2, 0xb1, 0x64, 0xb3, 0x40, 0x20, 0x6b, 0xd1, 0xe6, 0xeb, 0xe5,
	0x82, 0x91, 0xe7, 0xb6, 0xe2, 0x59, 0x21, 0x35, 0xb7, 0xe0, 0x66, 0x94, 0x0c, 0xd8, 0x1b, 0x69,
	0x9f, 0xe7, 0xf5, 0x26, 0x65, 0xe0, 0xe7, 0xf5, 0x26, 0x6d, 0xea, 0x25, 0x7a, 0x23, 0xfd, 0x9e,
	0x7c, 0x63, 0xc0, 0x6c, 0x6c, 0xd0, 0xa4, 0xa8, 0x7e, 0xc6, 0xdd, 0xcd, 0xcd, 0x52, 0xb1, 0x08,
	0xb3, 0xae, 0x60, 0xea, 0xc4, 0xca, 0x87, 0x91, 0x66, 0xae, 0x56, 0xea, 0x5b, 0x03, 0xa6, 0xf5,
	0x8b, 0x14, 0xee, 0xdc, 0x31, 0xaf, 0x37, 0x37, 0x4a, 0x44, 0x22, 0xc7, 0x96, 0xe2, 0xb8, 0x4d,
	0xd6, 0x0a, 0x9b, 0xe2, 0x3e, 0x51, 0xd7, 0xc5, 0x53, 0xf2, 0x93, 0x01, 0x57, 0xc7, 0x7c, 0x8c,
	0xb8, 0xe7, 0xef, 0xce, 0x31, 0x53, 0x35, 0xb7, 0xcb, 0x27, 0x20, 0xe3, 0xa6, 0x62, 0x5c, 0x23,
	0xab, 0x85, 0x9b, 0x5a, 0x5b, 0x30, 0xf9, 0xd1, 0x80, 0x4a, 0xea, 0x62, 0x21, 0x5b, 0xc5, 0x72,
	0x99, 0xcb, 0xc9, 0x74, 0xca, 0x86, 0x23, 0xdb, 0x86, 0x62, 0x5b, 0x25, 0x2b, 0x13, 0xd9, 0xe2,
	0xab, 0x8c, 0xfc, 0x6a, 0xc0, 0x42, 0xd6, 0xb2, 0xc9, 0x1b, 0x05, 0x7a, 0x93, 0x6f, 0x01, 0xf3,
	0xde, 0x45, 0xd3, 0x10, 0xd7, 0x51, 0xb8, 0x0d, 0xb2, 0x3e, 0xe1, 0x3c, 0x26, 0x79, 0xfa, 0xd2,
	0x20, 0xbf, 0x18, 0x30, 0x9f, 0x29, 0x46, 0x76, 0x8a, 0x1c, 0x20, 0xf7, 0x5e, 0x30, 0x77, 0x2f,
	0x92, 0x82, 0xa8, 0xf7, 0x14, 0xea, 0x36, 0x71, 0xca, 0xa1, 0xba, 0x4f, 0xd4, 0xef, 0xd3, 0x66,
	0xeb, 0xd9, 0x89, 0x65, 0x3c, 0x3f, 0xb1, 0x8c, 0xbf, 0x4e, 0x2c, 0xe3, 0xfb, 0x53, 0x6b, 0xea,
	0xf9, 0xa9, 0x35, 0xf5, 0xfb, 0xa9, 0x35, 0xf5, 0xe9, 0x46, 0xea, 0x13, 0x41, 0xd6, 0xf4, 0x0e,
	0xa9, 0x1f, 0xe8, 0xea, 0x47, 0x49, 0x7d, 0xf5, 0xa5, 0xd0, 0x99, 0x56, 0xdf, 0xe2, 0x77, 0xff,
	0x0d, 0x00, 0x00, 0xff, 0xff, 0xa2, 0x97, 0x52, 0xbf, 0x3d, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params returns all params
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// TaxRate returns the set tax rate
	TaxRate(ctx context.Context, in *QueryTaxRateRequest, opts ...grpc.CallOption) (*QueryTaxRateResponse, error)
	// Charities returns the set charities
	Charities(ctx context.Context, in *QueryCharitiesRequest, opts ...grpc.CallOption) (*QueryCharitiesResponse, error)
	// TaxCaps returns the tax caps
	TaxCaps(ctx context.Context, in *QueryTaxCapsRequest, opts ...grpc.CallOption) (*QueryTaxCapsResponse, error)
	// BurnRate returns the set charity burn rate
	BurnRate(ctx context.Context, in *QueryBurnRateRequest, opts ...grpc.CallOption) (*QueryBurnRateResponse, error)
	// TaxCap returns the tax cap based on denom
	TaxCap(ctx context.Context, in *QueryTaxCapRequest, opts ...grpc.CallOption) (*QueryTaxCapResponse, error)
	// TaxRateLimits returns the tax rate limits
	TaxRateLimits(ctx context.Context, in *QueryTaxRateLimitsRequest, opts ...grpc.CallOption) (*QueryTaxRateLimitsResponse, error)
	// TaxProceeds returns the tax proceeds for the current epoch
	TaxProceeds(ctx context.Context, in *QueryTaxProceedsRequest, opts ...grpc.CallOption) (*QueryTaxProceedsResponse, error)
	// CollectionEpochs returns the list of collection epochs
	CollectionEpochs(ctx context.Context, in *QueryAllCollectionEpochsRequest, opts ...grpc.CallOption) (*QueryAllCollectionEpochsResponse, error)
	// CollectionEpoch returns a single collection epoch based on *epoch*
	CollectionEpoch(ctx context.Context, in *QueryCollectionEpochRequest, opts ...grpc.CallOption) (*QueryCollectionEpochResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/enci.charity.v1beta1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TaxRate(ctx context.Context, in *QueryTaxRateRequest, opts ...grpc.CallOption) (*QueryTaxRateResponse, error) {
	out := new(QueryTaxRateResponse)
	err := c.cc.Invoke(ctx, "/enci.charity.v1beta1.Query/TaxRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Charities(ctx context.Context, in *QueryCharitiesRequest, opts ...grpc.CallOption) (*QueryCharitiesResponse, error) {
	out := new(QueryCharitiesResponse)
	err := c.cc.Invoke(ctx, "/enci.charity.v1beta1.Query/Charities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TaxCaps(ctx context.Context, in *QueryTaxCapsRequest, opts ...grpc.CallOption) (*QueryTaxCapsResponse, error) {
	out := new(QueryTaxCapsResponse)
	err := c.cc.Invoke(ctx, "/enci.charity.v1beta1.Query/TaxCaps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BurnRate(ctx context.Context, in *QueryBurnRateRequest, opts ...grpc.CallOption) (*QueryBurnRateResponse, error) {
	out := new(QueryBurnRateResponse)
	err := c.cc.Invoke(ctx, "/enci.charity.v1beta1.Query/BurnRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TaxCap(ctx context.Context, in *QueryTaxCapRequest, opts ...grpc.CallOption) (*QueryTaxCapResponse, error) {
	out := new(QueryTaxCapResponse)
	err := c.cc.Invoke(ctx, "/enci.charity.v1beta1.Query/TaxCap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TaxRateLimits(ctx context.Context, in *QueryTaxRateLimitsRequest, opts ...grpc.CallOption) (*QueryTaxRateLimitsResponse, error) {
	out := new(QueryTaxRateLimitsResponse)
	err := c.cc.Invoke(ctx, "/enci.charity.v1beta1.Query/TaxRateLimits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TaxProceeds(ctx context.Context, in *QueryTaxProceedsRequest, opts ...grpc.CallOption) (*QueryTaxProceedsResponse, error) {
	out := new(QueryTaxProceedsResponse)
	err := c.cc.Invoke(ctx, "/enci.charity.v1beta1.Query/TaxProceeds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CollectionEpochs(ctx context.Context, in *QueryAllCollectionEpochsRequest, opts ...grpc.CallOption) (*QueryAllCollectionEpochsResponse, error) {
	out := new(QueryAllCollectionEpochsResponse)
	err := c.cc.Invoke(ctx, "/enci.charity.v1beta1.Query/CollectionEpochs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CollectionEpoch(ctx context.Context, in *QueryCollectionEpochRequest, opts ...grpc.CallOption) (*QueryCollectionEpochResponse, error) {
	out := new(QueryCollectionEpochResponse)
	err := c.cc.Invoke(ctx, "/enci.charity.v1beta1.Query/CollectionEpoch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params returns all params
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// TaxRate returns the set tax rate
	TaxRate(context.Context, *QueryTaxRateRequest) (*QueryTaxRateResponse, error)
	// Charities returns the set charities
	Charities(context.Context, *QueryCharitiesRequest) (*QueryCharitiesResponse, error)
	// TaxCaps returns the tax caps
	TaxCaps(context.Context, *QueryTaxCapsRequest) (*QueryTaxCapsResponse, error)
	// BurnRate returns the set charity burn rate
	BurnRate(context.Context, *QueryBurnRateRequest) (*QueryBurnRateResponse, error)
	// TaxCap returns the tax cap based on denom
	TaxCap(context.Context, *QueryTaxCapRequest) (*QueryTaxCapResponse, error)
	// TaxRateLimits returns the tax rate limits
	TaxRateLimits(context.Context, *QueryTaxRateLimitsRequest) (*QueryTaxRateLimitsResponse, error)
	// TaxProceeds returns the tax proceeds for the current epoch
	TaxProceeds(context.Context, *QueryTaxProceedsRequest) (*QueryTaxProceedsResponse, error)
	// CollectionEpochs returns the list of collection epochs
	CollectionEpochs(context.Context, *QueryAllCollectionEpochsRequest) (*QueryAllCollectionEpochsResponse, error)
	// CollectionEpoch returns a single collection epoch based on *epoch*
	CollectionEpoch(context.Context, *QueryCollectionEpochRequest) (*QueryCollectionEpochResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) TaxRate(ctx context.Context, req *QueryTaxRateRequest) (*QueryTaxRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaxRate not implemented")
}
func (*UnimplementedQueryServer) Charities(ctx context.Context, req *QueryCharitiesRequest) (*QueryCharitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Charities not implemented")
}
func (*UnimplementedQueryServer) TaxCaps(ctx context.Context, req *QueryTaxCapsRequest) (*QueryTaxCapsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaxCaps not implemented")
}
func (*UnimplementedQueryServer) BurnRate(ctx context.Context, req *QueryBurnRateRequest) (*QueryBurnRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BurnRate not implemented")
}
func (*UnimplementedQueryServer) TaxCap(ctx context.Context, req *QueryTaxCapRequest) (*QueryTaxCapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaxCap not implemented")
}
func (*UnimplementedQueryServer) TaxRateLimits(ctx context.Context, req *QueryTaxRateLimitsRequest) (*QueryTaxRateLimitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaxRateLimits not implemented")
}
func (*UnimplementedQueryServer) TaxProceeds(ctx context.Context, req *QueryTaxProceedsRequest) (*QueryTaxProceedsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaxProceeds not implemented")
}
func (*UnimplementedQueryServer) CollectionEpochs(ctx context.Context, req *QueryAllCollectionEpochsRequest) (*QueryAllCollectionEpochsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectionEpochs not implemented")
}
func (*UnimplementedQueryServer) CollectionEpoch(ctx context.Context, req *QueryCollectionEpochRequest) (*QueryCollectionEpochResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectionEpoch not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enci.charity.v1beta1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TaxRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTaxRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TaxRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enci.charity.v1beta1.Query/TaxRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TaxRate(ctx, req.(*QueryTaxRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Charities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCharitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Charities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enci.charity.v1beta1.Query/Charities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Charities(ctx, req.(*QueryCharitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TaxCaps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTaxCapsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TaxCaps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enci.charity.v1beta1.Query/TaxCaps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TaxCaps(ctx, req.(*QueryTaxCapsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BurnRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBurnRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BurnRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enci.charity.v1beta1.Query/BurnRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BurnRate(ctx, req.(*QueryBurnRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TaxCap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTaxCapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TaxCap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enci.charity.v1beta1.Query/TaxCap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TaxCap(ctx, req.(*QueryTaxCapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TaxRateLimits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTaxRateLimitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TaxRateLimits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enci.charity.v1beta1.Query/TaxRateLimits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TaxRateLimits(ctx, req.(*QueryTaxRateLimitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TaxProceeds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTaxProceedsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TaxProceeds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enci.charity.v1beta1.Query/TaxProceeds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TaxProceeds(ctx, req.(*QueryTaxProceedsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CollectionEpochs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllCollectionEpochsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CollectionEpochs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enci.charity.v1beta1.Query/CollectionEpochs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CollectionEpochs(ctx, req.(*QueryAllCollectionEpochsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CollectionEpoch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCollectionEpochRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CollectionEpoch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enci.charity.v1beta1.Query/CollectionEpoch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CollectionEpoch(ctx, req.(*QueryCollectionEpochRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "enci.charity.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "TaxRate",
			Handler:    _Query_TaxRate_Handler,
		},
		{
			MethodName: "Charities",
			Handler:    _Query_Charities_Handler,
		},
		{
			MethodName: "TaxCaps",
			Handler:    _Query_TaxCaps_Handler,
		},
		{
			MethodName: "BurnRate",
			Handler:    _Query_BurnRate_Handler,
		},
		{
			MethodName: "TaxCap",
			Handler:    _Query_TaxCap_Handler,
		},
		{
			MethodName: "TaxRateLimits",
			Handler:    _Query_TaxRateLimits_Handler,
		},
		{
			MethodName: "TaxProceeds",
			Handler:    _Query_TaxProceeds_Handler,
		},
		{
			MethodName: "CollectionEpochs",
			Handler:    _Query_CollectionEpochs_Handler,
		},
		{
			MethodName: "CollectionEpoch",
			Handler:    _Query_CollectionEpoch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "enci/charity/v1beta1/query.proto",
}

func (m *QueryTaxRateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTaxRateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTaxRateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryTaxRateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTaxRateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTaxRateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TaxRate.Size()
		i -= size
		if _, err := m.TaxRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryCharitiesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCharitiesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCharitiesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryCharitiesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCharitiesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCharitiesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Charity) > 0 {
		for iNdEx := len(m.Charity) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Charity[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTaxCapsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTaxCapsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTaxCapsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryTaxCapsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTaxCapsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTaxCapsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TaxCaps) > 0 {
		for iNdEx := len(m.TaxCaps) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TaxCaps[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryBurnRateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBurnRateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBurnRateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryBurnRateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBurnRateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBurnRateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.BurnRate.Size()
		i -= size
		if _, err := m.BurnRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryTaxCapRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTaxCapRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTaxCapRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTaxCapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTaxCapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTaxCapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Cap.Size()
		i -= size
		if _, err := m.Cap.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryTaxProceedsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTaxProceedsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTaxProceedsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryTaxProceedsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTaxProceedsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTaxProceedsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TaxProceeds) > 0 {
		for iNdEx := len(m.TaxProceeds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TaxProceeds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTaxRateLimitsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTaxRateLimitsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTaxRateLimitsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryTaxRateLimitsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTaxRateLimitsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTaxRateLimitsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TaxRateLimits.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllCollectionEpochsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCollectionEpochsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCollectionEpochsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAllCollectionEpochsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCollectionEpochsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCollectionEpochsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CollectionEpochs) > 0 {
		for iNdEx := len(m.CollectionEpochs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CollectionEpochs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryCollectionEpochRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCollectionEpochRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCollectionEpochRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Epoch != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryCollectionEpochResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCollectionEpochResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCollectionEpochResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.CollectionEpoch.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryTaxRateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryTaxRateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TaxRate.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryCharitiesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryCharitiesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Charity) > 0 {
		for _, e := range m.Charity {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryTaxCapsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryTaxCapsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TaxCaps) > 0 {
		for _, e := range m.TaxCaps {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryBurnRateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryBurnRateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BurnRate.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryTaxCapRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTaxCapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Cap.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryTaxProceedsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryTaxProceedsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TaxProceeds) > 0 {
		for _, e := range m.TaxProceeds {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryTaxRateLimitsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryTaxRateLimitsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TaxRateLimits.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllCollectionEpochsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAllCollectionEpochsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CollectionEpochs) > 0 {
		for _, e := range m.CollectionEpochs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryCollectionEpochRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Epoch != 0 {
		n += 1 + sovQuery(uint64(m.Epoch))
	}
	return n
}

func (m *QueryCollectionEpochResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CollectionEpoch.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryTaxRateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTaxRateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTaxRateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTaxRateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTaxRateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTaxRateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaxRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TaxRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCharitiesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCharitiesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCharitiesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCharitiesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCharitiesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCharitiesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Charity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Charity = append(m.Charity, Charity{})
			if err := m.Charity[len(m.Charity)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTaxCapsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTaxCapsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTaxCapsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTaxCapsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTaxCapsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTaxCapsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaxCaps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaxCaps = append(m.TaxCaps, TaxCap{})
			if err := m.TaxCaps[len(m.TaxCaps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBurnRateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBurnRateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBurnRateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBurnRateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBurnRateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBurnRateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BurnRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTaxCapRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTaxCapRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTaxCapRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTaxCapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTaxCapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTaxCapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cap", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Cap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTaxProceedsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTaxProceedsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTaxProceedsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTaxProceedsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTaxProceedsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTaxProceedsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaxProceeds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaxProceeds = append(m.TaxProceeds, types.Coin{})
			if err := m.TaxProceeds[len(m.TaxProceeds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTaxRateLimitsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTaxRateLimitsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTaxRateLimitsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTaxRateLimitsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTaxRateLimitsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTaxRateLimitsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaxRateLimits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TaxRateLimits.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCollectionEpochsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCollectionEpochsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCollectionEpochsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCollectionEpochsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCollectionEpochsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCollectionEpochsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionEpochs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionEpochs = append(m.CollectionEpochs, CollectionEpoch{})
			if err := m.CollectionEpochs[len(m.CollectionEpochs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCollectionEpochRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCollectionEpochRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCollectionEpochRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCollectionEpochResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCollectionEpochResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCollectionEpochResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionEpoch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CollectionEpoch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
