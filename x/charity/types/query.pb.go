// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: charity/query.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryTaxRateRequest is the request type for the Query TaxRate Request RPC method
type QueryTaxRateRequest struct {
}

func (m *QueryTaxRateRequest) Reset()         { *m = QueryTaxRateRequest{} }
func (m *QueryTaxRateRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTaxRateRequest) ProtoMessage()    {}
func (*QueryTaxRateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd4bd1d3aa6ffcce, []int{0}
}
func (m *QueryTaxRateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTaxRateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTaxRateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTaxRateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTaxRateRequest.Merge(m, src)
}
func (m *QueryTaxRateRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTaxRateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTaxRateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTaxRateRequest proto.InternalMessageInfo

// QueryTaxRateResponse is the response type for the Query TaxRate Request RPC method
type QueryTaxRateResponse struct {
	TaxRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=tax_rate,json=taxRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"tax_rate"`
}

func (m *QueryTaxRateResponse) Reset()         { *m = QueryTaxRateResponse{} }
func (m *QueryTaxRateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTaxRateResponse) ProtoMessage()    {}
func (*QueryTaxRateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd4bd1d3aa6ffcce, []int{1}
}
func (m *QueryTaxRateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTaxRateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTaxRateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTaxRateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTaxRateResponse.Merge(m, src)
}
func (m *QueryTaxRateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTaxRateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTaxRateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTaxRateResponse proto.InternalMessageInfo

// QueryParamsRequest is the request type for the Query Params Request RPC method
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd4bd1d3aa6ffcce, []int{2}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is the response type for the Query Params Request RPC method
type QueryParamsResponse struct {
	Params *Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd4bd1d3aa6ffcce, []int{3}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() *Params {
	if m != nil {
		return m.Params
	}
	return nil
}

// QueryCharityOneRequest is the request type for the Query CharityOne Request RPC method
type QueryCharityOneRequest struct {
}

func (m *QueryCharityOneRequest) Reset()         { *m = QueryCharityOneRequest{} }
func (m *QueryCharityOneRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCharityOneRequest) ProtoMessage()    {}
func (*QueryCharityOneRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd4bd1d3aa6ffcce, []int{4}
}
func (m *QueryCharityOneRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCharityOneRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCharityOneRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCharityOneRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCharityOneRequest.Merge(m, src)
}
func (m *QueryCharityOneRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCharityOneRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCharityOneRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCharityOneRequest proto.InternalMessageInfo

// QueryCharityOneResponse is the response type for the Query CharityOne Request RPC method
type QueryCharityOneResponse struct {
	CharityOne *Charity `protobuf:"bytes,1,opt,name=charity_one,json=charityOne,proto3" json:"charity_one,omitempty"`
}

func (m *QueryCharityOneResponse) Reset()         { *m = QueryCharityOneResponse{} }
func (m *QueryCharityOneResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCharityOneResponse) ProtoMessage()    {}
func (*QueryCharityOneResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd4bd1d3aa6ffcce, []int{5}
}
func (m *QueryCharityOneResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCharityOneResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCharityOneResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCharityOneResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCharityOneResponse.Merge(m, src)
}
func (m *QueryCharityOneResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCharityOneResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCharityOneResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCharityOneResponse proto.InternalMessageInfo

func (m *QueryCharityOneResponse) GetCharityOne() *Charity {
	if m != nil {
		return m.CharityOne
	}
	return nil
}

// QueryCharityTwoRequest is the request type for the Query CharityTwo Request RPC method
type QueryCharityTwoRequest struct {
}

func (m *QueryCharityTwoRequest) Reset()         { *m = QueryCharityTwoRequest{} }
func (m *QueryCharityTwoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCharityTwoRequest) ProtoMessage()    {}
func (*QueryCharityTwoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd4bd1d3aa6ffcce, []int{6}
}
func (m *QueryCharityTwoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCharityTwoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCharityTwoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCharityTwoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCharityTwoRequest.Merge(m, src)
}
func (m *QueryCharityTwoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCharityTwoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCharityTwoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCharityTwoRequest proto.InternalMessageInfo

// QueryCharityTwoResponse is the response type for the Query CharityTwo Request RPC method
type QueryCharityTwoResponse struct {
	CharityTwo *Charity `protobuf:"bytes,1,opt,name=charity_two,json=charityTwo,proto3" json:"charity_two,omitempty"`
}

func (m *QueryCharityTwoResponse) Reset()         { *m = QueryCharityTwoResponse{} }
func (m *QueryCharityTwoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCharityTwoResponse) ProtoMessage()    {}
func (*QueryCharityTwoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd4bd1d3aa6ffcce, []int{7}
}
func (m *QueryCharityTwoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCharityTwoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCharityTwoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCharityTwoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCharityTwoResponse.Merge(m, src)
}
func (m *QueryCharityTwoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCharityTwoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCharityTwoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCharityTwoResponse proto.InternalMessageInfo

func (m *QueryCharityTwoResponse) GetCharityTwo() *Charity {
	if m != nil {
		return m.CharityTwo
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryTaxRateRequest)(nil), "user.charity.charity.QueryTaxRateRequest")
	proto.RegisterType((*QueryTaxRateResponse)(nil), "user.charity.charity.QueryTaxRateResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "user.charity.charity.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "user.charity.charity.QueryParamsResponse")
	proto.RegisterType((*QueryCharityOneRequest)(nil), "user.charity.charity.QueryCharityOneRequest")
	proto.RegisterType((*QueryCharityOneResponse)(nil), "user.charity.charity.QueryCharityOneResponse")
	proto.RegisterType((*QueryCharityTwoRequest)(nil), "user.charity.charity.QueryCharityTwoRequest")
	proto.RegisterType((*QueryCharityTwoResponse)(nil), "user.charity.charity.QueryCharityTwoResponse")
}

func init() { proto.RegisterFile("charity/query.proto", fileDescriptor_fd4bd1d3aa6ffcce) }

var fileDescriptor_fd4bd1d3aa6ffcce = []byte{
	// 504 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0x41, 0x6e, 0xd3, 0x40,
	0x14, 0x86, 0x33, 0xa8, 0xa4, 0x30, 0xdd, 0x4d, 0x53, 0x1a, 0xac, 0xe0, 0x54, 0x16, 0x82, 0xb6,
	0xa2, 0x1e, 0xb5, 0x70, 0x01, 0x42, 0x37, 0x88, 0x05, 0x10, 0x65, 0xc5, 0x26, 0x9a, 0x98, 0x91,
	0x6b, 0x41, 0xfc, 0x5c, 0xcf, 0x04, 0x3b, 0x1b, 0x16, 0xbd, 0x00, 0x48, 0x5c, 0x84, 0x63, 0x64,
	0x59, 0x89, 0x0d, 0x62, 0x11, 0xa1, 0x84, 0x83, 0x20, 0xcf, 0x8c, 0x13, 0xb7, 0x36, 0x95, 0xc5,
	0xca, 0xd6, 0x9b, 0xf7, 0xfe, 0xff, 0x4b, 0xde, 0x3f, 0xc6, 0xdb, 0xde, 0x19, 0x8b, 0x03, 0x39,
	0xa5, 0xe7, 0x13, 0x1e, 0x4f, 0xdd, 0x28, 0x06, 0x09, 0xa4, 0x35, 0x11, 0x3c, 0x76, 0xcd, 0x49,
	0xfe, 0xb4, 0x3a, 0x3e, 0x80, 0xff, 0x91, 0x53, 0x16, 0x05, 0x94, 0x85, 0x21, 0x48, 0x26, 0x03,
	0x08, 0x85, 0x9e, 0xb1, 0x0e, 0x3d, 0x10, 0x63, 0x10, 0x74, 0xc4, 0x04, 0xd7, 0x62, 0xf4, 0xd3,
	0xf1, 0x88, 0x4b, 0x76, 0x4c, 0x23, 0xe6, 0x07, 0xa1, 0x6a, 0x36, 0xbd, 0x2d, 0x1f, 0x7c, 0x50,
	0xaf, 0x34, 0x7b, 0x33, 0xd5, 0x9d, 0x1c, 0x25, 0x37, 0x56, 0x65, 0x67, 0x07, 0x6f, 0xbf, 0xcd,
	0xe4, 0x06, 0x2c, 0xed, 0x33, 0xc9, 0xfb, 0xfc, 0x7c, 0xc2, 0x85, 0x74, 0x18, 0x6e, 0x5d, 0x2d,
	0x8b, 0x08, 0x42, 0xc1, 0xc9, 0x4b, 0x7c, 0x47, 0xb2, 0x74, 0x18, 0x33, 0xc9, 0xdb, 0x68, 0x0f,
	0xed, 0xdf, 0xed, 0xb9, 0xb3, 0x79, 0xb7, 0xf1, 0x6b, 0xde, 0x7d, 0xe4, 0x07, 0xf2, 0x6c, 0x32,
	0x72, 0x3d, 0x18, 0x53, 0x03, 0xab, 0x1f, 0x47, 0xe2, 0xfd, 0x07, 0x2a, 0xa7, 0x11, 0x17, 0xee,
	0x29, 0xf7, 0xfa, 0x9b, 0x52, 0x4b, 0x3a, 0x2d, 0x4c, 0x94, 0xc5, 0x1b, 0x16, 0xb3, 0xb1, 0xc8,
	0x8d, 0x5f, 0x19, 0x9e, 0xbc, 0x6a, 0x7c, 0x9f, 0xe1, 0x66, 0xa4, 0x2a, 0xca, 0x75, 0xeb, 0xa4,
	0xe3, 0x56, 0xfd, 0x89, 0xae, 0x99, 0x32, 0xbd, 0x4e, 0x1b, 0xdf, 0x53, 0x62, 0x2f, 0xf4, 0xf1,
	0xeb, 0x70, 0xf5, 0xfb, 0x86, 0x78, 0xb7, 0x74, 0x62, 0xac, 0x4e, 0xf1, 0x96, 0x91, 0x1b, 0x42,
	0xc8, 0x8d, 0xdf, 0x83, 0x6a, 0x3f, 0x33, 0xde, 0xdb, 0x98, 0xcd, 0xbb, 0xa8, 0x8f, 0xbd, 0x95,
	0xda, 0x75, 0xeb, 0x41, 0x02, 0xff, 0xb0, 0x56, 0x27, 0x65, 0x6b, 0x99, 0xc0, 0xff, 0x58, 0x0f,
	0x12, 0x38, 0xf9, 0xbe, 0x81, 0x6f, 0x2b, 0x07, 0x72, 0x81, 0xf0, 0xa6, 0xd9, 0x20, 0x39, 0xa8,
	0x96, 0xa9, 0x58, 0xbe, 0x75, 0x58, 0xa7, 0x55, 0x23, 0x3b, 0x7b, 0x17, 0x3f, 0xfe, 0x7c, 0xbb,
	0x65, 0x91, 0x36, 0xbd, 0x96, 0x2f, 0x2a, 0x59, 0x9a, 0xc5, 0x84, 0x7c, 0xc6, 0x4d, 0xbd, 0x16,
	0xb2, 0x7f, 0x83, 0xee, 0x95, 0x14, 0x58, 0x07, 0x35, 0x3a, 0x0d, 0x40, 0x57, 0x01, 0xdc, 0x27,
	0xbb, 0x25, 0x00, 0x1d, 0x02, 0xf2, 0x05, 0x61, 0xbc, 0x5e, 0x33, 0x79, 0x72, 0x83, 0x74, 0x29,
	0x27, 0xd6, 0x51, 0xcd, 0x6e, 0x03, 0xf3, 0x50, 0xc1, 0xd8, 0xa4, 0x53, 0x82, 0x29, 0x44, 0xaa,
	0x48, 0x34, 0x48, 0xa0, 0x0e, 0xd1, 0x3a, 0x3e, 0x75, 0x88, 0x0a, 0x91, 0xaa, 0x41, 0x24, 0x13,
	0xe8, 0x3d, 0x9f, 0x2d, 0x6c, 0x74, 0xb9, 0xb0, 0xd1, 0xef, 0x85, 0x8d, 0xbe, 0x2e, 0xed, 0xc6,
	0xe5, 0xd2, 0x6e, 0xfc, 0x5c, 0xda, 0x8d, 0x77, 0x8f, 0x0b, 0xd7, 0x3a, 0x33, 0x5e, 0x8d, 0xa7,
	0xeb, 0x45, 0x67, 0x77, 0x7b, 0xd4, 0x54, 0xdf, 0x93, 0xa7, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff,
	0x36, 0x2e, 0x8d, 0x51, 0xf3, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// TaxRate returns the set tax rate
	TaxRate(ctx context.Context, in *QueryTaxRateRequest, opts ...grpc.CallOption) (*QueryTaxRateResponse, error)
	// Params returns all params
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// CharityOne returns the first set charity
	CharityOne(ctx context.Context, in *QueryCharityOneRequest, opts ...grpc.CallOption) (*QueryCharityOneResponse, error)
	// CharityTwo returns the second set charity
	CharityTwo(ctx context.Context, in *QueryCharityTwoRequest, opts ...grpc.CallOption) (*QueryCharityTwoResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) TaxRate(ctx context.Context, in *QueryTaxRateRequest, opts ...grpc.CallOption) (*QueryTaxRateResponse, error) {
	out := new(QueryTaxRateResponse)
	err := c.cc.Invoke(ctx, "/user.charity.charity.Query/TaxRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/user.charity.charity.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CharityOne(ctx context.Context, in *QueryCharityOneRequest, opts ...grpc.CallOption) (*QueryCharityOneResponse, error) {
	out := new(QueryCharityOneResponse)
	err := c.cc.Invoke(ctx, "/user.charity.charity.Query/CharityOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CharityTwo(ctx context.Context, in *QueryCharityTwoRequest, opts ...grpc.CallOption) (*QueryCharityTwoResponse, error) {
	out := new(QueryCharityTwoResponse)
	err := c.cc.Invoke(ctx, "/user.charity.charity.Query/CharityTwo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// TaxRate returns the set tax rate
	TaxRate(context.Context, *QueryTaxRateRequest) (*QueryTaxRateResponse, error)
	// Params returns all params
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// CharityOne returns the first set charity
	CharityOne(context.Context, *QueryCharityOneRequest) (*QueryCharityOneResponse, error)
	// CharityTwo returns the second set charity
	CharityTwo(context.Context, *QueryCharityTwoRequest) (*QueryCharityTwoResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) TaxRate(ctx context.Context, req *QueryTaxRateRequest) (*QueryTaxRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaxRate not implemented")
}
func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) CharityOne(ctx context.Context, req *QueryCharityOneRequest) (*QueryCharityOneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CharityOne not implemented")
}
func (*UnimplementedQueryServer) CharityTwo(ctx context.Context, req *QueryCharityTwoRequest) (*QueryCharityTwoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CharityTwo not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_TaxRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTaxRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TaxRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.charity.charity.Query/TaxRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TaxRate(ctx, req.(*QueryTaxRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.charity.charity.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CharityOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCharityOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CharityOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.charity.charity.Query/CharityOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CharityOne(ctx, req.(*QueryCharityOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CharityTwo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCharityTwoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CharityTwo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.charity.charity.Query/CharityTwo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CharityTwo(ctx, req.(*QueryCharityTwoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "user.charity.charity.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TaxRate",
			Handler:    _Query_TaxRate_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "CharityOne",
			Handler:    _Query_CharityOne_Handler,
		},
		{
			MethodName: "CharityTwo",
			Handler:    _Query_CharityTwo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "charity/query.proto",
}

func (m *QueryTaxRateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTaxRateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTaxRateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryTaxRateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTaxRateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTaxRateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TaxRate.Size()
		i -= size
		if _, err := m.TaxRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Params != nil {
		{
			size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCharityOneRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCharityOneRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCharityOneRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryCharityOneResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCharityOneResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCharityOneResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CharityOne != nil {
		{
			size, err := m.CharityOne.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCharityTwoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCharityTwoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCharityTwoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryCharityTwoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCharityTwoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCharityTwoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CharityTwo != nil {
		{
			size, err := m.CharityTwo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryTaxRateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryTaxRateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TaxRate.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Params != nil {
		l = m.Params.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCharityOneRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryCharityOneResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CharityOne != nil {
		l = m.CharityOne.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCharityTwoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryCharityTwoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CharityTwo != nil {
		l = m.CharityTwo.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryTaxRateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTaxRateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTaxRateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTaxRateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTaxRateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTaxRateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaxRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TaxRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = &Params{}
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCharityOneRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCharityOneRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCharityOneRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCharityOneResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCharityOneResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCharityOneResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CharityOne", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CharityOne == nil {
				m.CharityOne = &Charity{}
			}
			if err := m.CharityOne.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCharityTwoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCharityTwoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCharityTwoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCharityTwoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCharityTwoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCharityTwoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CharityTwo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CharityTwo == nil {
				m.CharityTwo = &Charity{}
			}
			if err := m.CharityTwo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
