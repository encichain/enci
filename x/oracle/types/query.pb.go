// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: enci/oracle/v1beta1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is the request type for the Query/Params RPC method
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c227d6a44a2e181b, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is the response type for the Query/Params RPC method
type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c227d6a44a2e181b, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryRoundResponse is the request type for the Query/Params RPC method
type QueryVoteRoundsRequest struct {
}

func (m *QueryVoteRoundsRequest) Reset()         { *m = QueryVoteRoundsRequest{} }
func (m *QueryVoteRoundsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVoteRoundsRequest) ProtoMessage()    {}
func (*QueryVoteRoundsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c227d6a44a2e181b, []int{2}
}
func (m *QueryVoteRoundsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVoteRoundsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVoteRoundsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVoteRoundsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVoteRoundsRequest.Merge(m, src)
}
func (m *QueryVoteRoundsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVoteRoundsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVoteRoundsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVoteRoundsRequest proto.InternalMessageInfo

// QueryRoundResponse is the response type for the Query/Params RPC method
type QueryVoteRoundsResponse struct {
	VoteRounds []VoteRound `protobuf:"bytes,1,rep,name=vote_rounds,json=voteRounds,proto3" json:"vote_rounds"`
}

func (m *QueryVoteRoundsResponse) Reset()         { *m = QueryVoteRoundsResponse{} }
func (m *QueryVoteRoundsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVoteRoundsResponse) ProtoMessage()    {}
func (*QueryVoteRoundsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c227d6a44a2e181b, []int{3}
}
func (m *QueryVoteRoundsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVoteRoundsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVoteRoundsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVoteRoundsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVoteRoundsResponse.Merge(m, src)
}
func (m *QueryVoteRoundsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVoteRoundsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVoteRoundsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVoteRoundsResponse proto.InternalMessageInfo

func (m *QueryVoteRoundsResponse) GetVoteRounds() []VoteRound {
	if m != nil {
		return m.VoteRounds
	}
	return nil
}

// QueryPrevoteRoundsRequest is the request type for the Query PrevoteRounds RPC method
type QueryPrevoteRoundsRequest struct {
}

func (m *QueryPrevoteRoundsRequest) Reset()         { *m = QueryPrevoteRoundsRequest{} }
func (m *QueryPrevoteRoundsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPrevoteRoundsRequest) ProtoMessage()    {}
func (*QueryPrevoteRoundsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c227d6a44a2e181b, []int{4}
}
func (m *QueryPrevoteRoundsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPrevoteRoundsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPrevoteRoundsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPrevoteRoundsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPrevoteRoundsRequest.Merge(m, src)
}
func (m *QueryPrevoteRoundsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPrevoteRoundsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPrevoteRoundsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPrevoteRoundsRequest proto.InternalMessageInfo

// QueryPrevoteRoundsResponse is the response type for the Query PrevoteRoudns RPC method
type QueryPrevoteRoundsResponse struct {
	PrevoteRounds []PrevoteRound `protobuf:"bytes,1,rep,name=prevote_rounds,json=prevoteRounds,proto3" json:"prevote_rounds"`
}

func (m *QueryPrevoteRoundsResponse) Reset()         { *m = QueryPrevoteRoundsResponse{} }
func (m *QueryPrevoteRoundsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPrevoteRoundsResponse) ProtoMessage()    {}
func (*QueryPrevoteRoundsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c227d6a44a2e181b, []int{5}
}
func (m *QueryPrevoteRoundsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPrevoteRoundsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPrevoteRoundsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPrevoteRoundsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPrevoteRoundsResponse.Merge(m, src)
}
func (m *QueryPrevoteRoundsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPrevoteRoundsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPrevoteRoundsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPrevoteRoundsResponse proto.InternalMessageInfo

func (m *QueryPrevoteRoundsResponse) GetPrevoteRounds() []PrevoteRound {
	if m != nil {
		return m.PrevoteRounds
	}
	return nil
}

// QueryVoterDelegationsRequest is the request type for the Query VoterDelegations RPC method
type QueryVoterDelegationsRequest struct {
}

func (m *QueryVoterDelegationsRequest) Reset()         { *m = QueryVoterDelegationsRequest{} }
func (m *QueryVoterDelegationsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVoterDelegationsRequest) ProtoMessage()    {}
func (*QueryVoterDelegationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c227d6a44a2e181b, []int{6}
}
func (m *QueryVoterDelegationsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVoterDelegationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVoterDelegationsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVoterDelegationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVoterDelegationsRequest.Merge(m, src)
}
func (m *QueryVoterDelegationsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVoterDelegationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVoterDelegationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVoterDelegationsRequest proto.InternalMessageInfo

// QueryVoterDelegationsResponse is the response type for the query VoterDelegations RPC method
type QueryVoterDelegationsResponse struct {
	VoterDelegations []VoterDelegation `protobuf:"bytes,1,rep,name=voter_delegations,json=voterDelegations,proto3" json:"voter_delegations"`
}

func (m *QueryVoterDelegationsResponse) Reset()         { *m = QueryVoterDelegationsResponse{} }
func (m *QueryVoterDelegationsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVoterDelegationsResponse) ProtoMessage()    {}
func (*QueryVoterDelegationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c227d6a44a2e181b, []int{7}
}
func (m *QueryVoterDelegationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVoterDelegationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVoterDelegationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVoterDelegationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVoterDelegationsResponse.Merge(m, src)
}
func (m *QueryVoterDelegationsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVoterDelegationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVoterDelegationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVoterDelegationsResponse proto.InternalMessageInfo

func (m *QueryVoterDelegationsResponse) GetVoterDelegations() []VoterDelegation {
	if m != nil {
		return m.VoterDelegations
	}
	return nil
}

// QueryDelegatorAddressRequest is the request type for the Query Delegator Address RPC method
type QueryDelegatorAddressRequest struct {
	Delegate string `protobuf:"bytes,1,opt,name=delegate,proto3" json:"delegate,omitempty"`
}

func (m *QueryDelegatorAddressRequest) Reset()         { *m = QueryDelegatorAddressRequest{} }
func (m *QueryDelegatorAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDelegatorAddressRequest) ProtoMessage()    {}
func (*QueryDelegatorAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c227d6a44a2e181b, []int{8}
}
func (m *QueryDelegatorAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegatorAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegatorAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegatorAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegatorAddressRequest.Merge(m, src)
}
func (m *QueryDelegatorAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegatorAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegatorAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegatorAddressRequest proto.InternalMessageInfo

func (m *QueryDelegatorAddressRequest) GetDelegate() string {
	if m != nil {
		return m.Delegate
	}
	return ""
}

// QueryDelegatorAddressRequest is the response type for the Query Delegator Address RPC method
type QueryDelegatorAddressResponse struct {
	Validator string `protobuf:"bytes,1,opt,name=validator,proto3" json:"validator,omitempty"`
}

func (m *QueryDelegatorAddressResponse) Reset()         { *m = QueryDelegatorAddressResponse{} }
func (m *QueryDelegatorAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDelegatorAddressResponse) ProtoMessage()    {}
func (*QueryDelegatorAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c227d6a44a2e181b, []int{9}
}
func (m *QueryDelegatorAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegatorAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegatorAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegatorAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegatorAddressResponse.Merge(m, src)
}
func (m *QueryDelegatorAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegatorAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegatorAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegatorAddressResponse proto.InternalMessageInfo

func (m *QueryDelegatorAddressResponse) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

// QueryDelegateAddressRequest is the request type for the Query DelegateAddress RPC method
type QueryDelegateAddressRequest struct {
	Validator string `protobuf:"bytes,1,opt,name=validator,proto3" json:"validator,omitempty"`
}

func (m *QueryDelegateAddressRequest) Reset()         { *m = QueryDelegateAddressRequest{} }
func (m *QueryDelegateAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDelegateAddressRequest) ProtoMessage()    {}
func (*QueryDelegateAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c227d6a44a2e181b, []int{10}
}
func (m *QueryDelegateAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegateAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegateAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegateAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegateAddressRequest.Merge(m, src)
}
func (m *QueryDelegateAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegateAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegateAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegateAddressRequest proto.InternalMessageInfo

func (m *QueryDelegateAddressRequest) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

// QueryDelegateAddressRequest is the response type for the Query DelegateAddress RPC method
type QueryDelegateAddressResponse struct {
	Delegate string `protobuf:"bytes,2,opt,name=delegate,proto3" json:"delegate,omitempty"`
}

func (m *QueryDelegateAddressResponse) Reset()         { *m = QueryDelegateAddressResponse{} }
func (m *QueryDelegateAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDelegateAddressResponse) ProtoMessage()    {}
func (*QueryDelegateAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c227d6a44a2e181b, []int{11}
}
func (m *QueryDelegateAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegateAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegateAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegateAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegateAddressResponse.Merge(m, src)
}
func (m *QueryDelegateAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegateAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegateAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegateAddressResponse proto.InternalMessageInfo

func (m *QueryDelegateAddressResponse) GetDelegate() string {
	if m != nil {
		return m.Delegate
	}
	return ""
}

// QueryNextVotePeriodRequest is the request type for the Query NextVotePeriod RPC method
type QueryNextVotePeriodRequest struct {
}

func (m *QueryNextVotePeriodRequest) Reset()         { *m = QueryNextVotePeriodRequest{} }
func (m *QueryNextVotePeriodRequest) String() string { return proto.CompactTextString(m) }
func (*QueryNextVotePeriodRequest) ProtoMessage()    {}
func (*QueryNextVotePeriodRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c227d6a44a2e181b, []int{12}
}
func (m *QueryNextVotePeriodRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNextVotePeriodRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNextVotePeriodRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNextVotePeriodRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNextVotePeriodRequest.Merge(m, src)
}
func (m *QueryNextVotePeriodRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryNextVotePeriodRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNextVotePeriodRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNextVotePeriodRequest proto.InternalMessageInfo

// QueryNextVotePeriodRequest is the response type for the Query NextVotePeriod RPC method
type QueryNextVotePeriodResponse struct {
	Block uint64 `protobuf:"varint,1,opt,name=block,proto3" json:"block,omitempty"`
}

func (m *QueryNextVotePeriodResponse) Reset()         { *m = QueryNextVotePeriodResponse{} }
func (m *QueryNextVotePeriodResponse) String() string { return proto.CompactTextString(m) }
func (*QueryNextVotePeriodResponse) ProtoMessage()    {}
func (*QueryNextVotePeriodResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c227d6a44a2e181b, []int{13}
}
func (m *QueryNextVotePeriodResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNextVotePeriodResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNextVotePeriodResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNextVotePeriodResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNextVotePeriodResponse.Merge(m, src)
}
func (m *QueryNextVotePeriodResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryNextVotePeriodResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNextVotePeriodResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNextVotePeriodResponse proto.InternalMessageInfo

func (m *QueryNextVotePeriodResponse) GetBlock() uint64 {
	if m != nil {
		return m.Block
	}
	return 0
}

// QueryNextPrevoteRequest is the request type for the Query NextPrevote RPC method
type QueryNextPrevoteRequest struct {
}

func (m *QueryNextPrevoteRequest) Reset()         { *m = QueryNextPrevoteRequest{} }
func (m *QueryNextPrevoteRequest) String() string { return proto.CompactTextString(m) }
func (*QueryNextPrevoteRequest) ProtoMessage()    {}
func (*QueryNextPrevoteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c227d6a44a2e181b, []int{14}
}
func (m *QueryNextPrevoteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNextPrevoteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNextPrevoteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNextPrevoteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNextPrevoteRequest.Merge(m, src)
}
func (m *QueryNextPrevoteRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryNextPrevoteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNextPrevoteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNextPrevoteRequest proto.InternalMessageInfo

// QueryNextPrevoteRequest is the response type for the Query NextPrevote RPC method
type QueryNextPrevoteResponse struct {
	Block uint64 `protobuf:"varint,1,opt,name=block,proto3" json:"block,omitempty"`
}

func (m *QueryNextPrevoteResponse) Reset()         { *m = QueryNextPrevoteResponse{} }
func (m *QueryNextPrevoteResponse) String() string { return proto.CompactTextString(m) }
func (*QueryNextPrevoteResponse) ProtoMessage()    {}
func (*QueryNextPrevoteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c227d6a44a2e181b, []int{15}
}
func (m *QueryNextPrevoteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNextPrevoteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNextPrevoteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNextPrevoteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNextPrevoteResponse.Merge(m, src)
}
func (m *QueryNextPrevoteResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryNextPrevoteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNextPrevoteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNextPrevoteResponse proto.InternalMessageInfo

func (m *QueryNextPrevoteResponse) GetBlock() uint64 {
	if m != nil {
		return m.Block
	}
	return 0
}

type QueryClaimTypesRequest struct {
}

func (m *QueryClaimTypesRequest) Reset()         { *m = QueryClaimTypesRequest{} }
func (m *QueryClaimTypesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryClaimTypesRequest) ProtoMessage()    {}
func (*QueryClaimTypesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c227d6a44a2e181b, []int{16}
}
func (m *QueryClaimTypesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryClaimTypesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryClaimTypesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryClaimTypesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryClaimTypesRequest.Merge(m, src)
}
func (m *QueryClaimTypesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryClaimTypesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryClaimTypesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryClaimTypesRequest proto.InternalMessageInfo

type QueryClaimTypesResponse struct {
	ClaimTypes []string `protobuf:"bytes,1,rep,name=claim_types,json=claimTypes,proto3" json:"claim_types,omitempty"`
}

func (m *QueryClaimTypesResponse) Reset()         { *m = QueryClaimTypesResponse{} }
func (m *QueryClaimTypesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryClaimTypesResponse) ProtoMessage()    {}
func (*QueryClaimTypesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c227d6a44a2e181b, []int{17}
}
func (m *QueryClaimTypesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryClaimTypesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryClaimTypesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryClaimTypesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryClaimTypesResponse.Merge(m, src)
}
func (m *QueryClaimTypesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryClaimTypesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryClaimTypesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryClaimTypesResponse proto.InternalMessageInfo

func (m *QueryClaimTypesResponse) GetClaimTypes() []string {
	if m != nil {
		return m.ClaimTypes
	}
	return nil
}

// QueryNextPrevoteRequest is the request type for the Query NextPrevote RPC method
type QueryIsVotePeriodRequest struct {
}

func (m *QueryIsVotePeriodRequest) Reset()         { *m = QueryIsVotePeriodRequest{} }
func (m *QueryIsVotePeriodRequest) String() string { return proto.CompactTextString(m) }
func (*QueryIsVotePeriodRequest) ProtoMessage()    {}
func (*QueryIsVotePeriodRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c227d6a44a2e181b, []int{18}
}
func (m *QueryIsVotePeriodRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIsVotePeriodRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIsVotePeriodRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIsVotePeriodRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIsVotePeriodRequest.Merge(m, src)
}
func (m *QueryIsVotePeriodRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryIsVotePeriodRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIsVotePeriodRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIsVotePeriodRequest proto.InternalMessageInfo

// QueryNextPrevoteRequest is the response type for the Query NextPrevote RPC method
type QueryIsVotePeriodResponse struct {
	IsVotePeriod bool `protobuf:"varint,1,opt,name=is_vote_period,json=isVotePeriod,proto3" json:"is_vote_period,omitempty"`
}

func (m *QueryIsVotePeriodResponse) Reset()         { *m = QueryIsVotePeriodResponse{} }
func (m *QueryIsVotePeriodResponse) String() string { return proto.CompactTextString(m) }
func (*QueryIsVotePeriodResponse) ProtoMessage()    {}
func (*QueryIsVotePeriodResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c227d6a44a2e181b, []int{19}
}
func (m *QueryIsVotePeriodResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIsVotePeriodResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIsVotePeriodResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIsVotePeriodResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIsVotePeriodResponse.Merge(m, src)
}
func (m *QueryIsVotePeriodResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIsVotePeriodResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIsVotePeriodResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIsVotePeriodResponse proto.InternalMessageInfo

func (m *QueryIsVotePeriodResponse) GetIsVotePeriod() bool {
	if m != nil {
		return m.IsVotePeriod
	}
	return false
}

// QueryNextPrevoteRequest is the request type for the Query NextPrevote RPC method
type QueryIsPrevotePeriodRequest struct {
}

func (m *QueryIsPrevotePeriodRequest) Reset()         { *m = QueryIsPrevotePeriodRequest{} }
func (m *QueryIsPrevotePeriodRequest) String() string { return proto.CompactTextString(m) }
func (*QueryIsPrevotePeriodRequest) ProtoMessage()    {}
func (*QueryIsPrevotePeriodRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c227d6a44a2e181b, []int{20}
}
func (m *QueryIsPrevotePeriodRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIsPrevotePeriodRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIsPrevotePeriodRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIsPrevotePeriodRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIsPrevotePeriodRequest.Merge(m, src)
}
func (m *QueryIsPrevotePeriodRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryIsPrevotePeriodRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIsPrevotePeriodRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIsPrevotePeriodRequest proto.InternalMessageInfo

// QueryNextPrevoteRequest is the response type for the Query NextPrevote RPC method
type QueryIsPrevotePeriodResponse struct {
	IsPrevotePeriod bool `protobuf:"varint,1,opt,name=is_prevote_period,json=isPrevotePeriod,proto3" json:"is_prevote_period,omitempty"`
}

func (m *QueryIsPrevotePeriodResponse) Reset()         { *m = QueryIsPrevotePeriodResponse{} }
func (m *QueryIsPrevotePeriodResponse) String() string { return proto.CompactTextString(m) }
func (*QueryIsPrevotePeriodResponse) ProtoMessage()    {}
func (*QueryIsPrevotePeriodResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c227d6a44a2e181b, []int{21}
}
func (m *QueryIsPrevotePeriodResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIsPrevotePeriodResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIsPrevotePeriodResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIsPrevotePeriodResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIsPrevotePeriodResponse.Merge(m, src)
}
func (m *QueryIsPrevotePeriodResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIsPrevotePeriodResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIsPrevotePeriodResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIsPrevotePeriodResponse proto.InternalMessageInfo

func (m *QueryIsPrevotePeriodResponse) GetIsPrevotePeriod() bool {
	if m != nil {
		return m.IsPrevotePeriod
	}
	return false
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "enci.oracle.v1beta1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "enci.oracle.v1beta1.QueryParamsResponse")
	proto.RegisterType((*QueryVoteRoundsRequest)(nil), "enci.oracle.v1beta1.QueryVoteRoundsRequest")
	proto.RegisterType((*QueryVoteRoundsResponse)(nil), "enci.oracle.v1beta1.QueryVoteRoundsResponse")
	proto.RegisterType((*QueryPrevoteRoundsRequest)(nil), "enci.oracle.v1beta1.QueryPrevoteRoundsRequest")
	proto.RegisterType((*QueryPrevoteRoundsResponse)(nil), "enci.oracle.v1beta1.QueryPrevoteRoundsResponse")
	proto.RegisterType((*QueryVoterDelegationsRequest)(nil), "enci.oracle.v1beta1.QueryVoterDelegationsRequest")
	proto.RegisterType((*QueryVoterDelegationsResponse)(nil), "enci.oracle.v1beta1.QueryVoterDelegationsResponse")
	proto.RegisterType((*QueryDelegatorAddressRequest)(nil), "enci.oracle.v1beta1.QueryDelegatorAddressRequest")
	proto.RegisterType((*QueryDelegatorAddressResponse)(nil), "enci.oracle.v1beta1.QueryDelegatorAddressResponse")
	proto.RegisterType((*QueryDelegateAddressRequest)(nil), "enci.oracle.v1beta1.QueryDelegateAddressRequest")
	proto.RegisterType((*QueryDelegateAddressResponse)(nil), "enci.oracle.v1beta1.QueryDelegateAddressResponse")
	proto.RegisterType((*QueryNextVotePeriodRequest)(nil), "enci.oracle.v1beta1.QueryNextVotePeriodRequest")
	proto.RegisterType((*QueryNextVotePeriodResponse)(nil), "enci.oracle.v1beta1.QueryNextVotePeriodResponse")
	proto.RegisterType((*QueryNextPrevoteRequest)(nil), "enci.oracle.v1beta1.QueryNextPrevoteRequest")
	proto.RegisterType((*QueryNextPrevoteResponse)(nil), "enci.oracle.v1beta1.QueryNextPrevoteResponse")
	proto.RegisterType((*QueryClaimTypesRequest)(nil), "enci.oracle.v1beta1.QueryClaimTypesRequest")
	proto.RegisterType((*QueryClaimTypesResponse)(nil), "enci.oracle.v1beta1.QueryClaimTypesResponse")
	proto.RegisterType((*QueryIsVotePeriodRequest)(nil), "enci.oracle.v1beta1.QueryIsVotePeriodRequest")
	proto.RegisterType((*QueryIsVotePeriodResponse)(nil), "enci.oracle.v1beta1.QueryIsVotePeriodResponse")
	proto.RegisterType((*QueryIsPrevotePeriodRequest)(nil), "enci.oracle.v1beta1.QueryIsPrevotePeriodRequest")
	proto.RegisterType((*QueryIsPrevotePeriodResponse)(nil), "enci.oracle.v1beta1.QueryIsPrevotePeriodResponse")
}

func init() { proto.RegisterFile("enci/oracle/v1beta1/query.proto", fileDescriptor_c227d6a44a2e181b) }

var fileDescriptor_c227d6a44a2e181b = []byte{
	// 979 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x96, 0x4d, 0x6f, 0xdc, 0x44,
	0x18, 0xc7, 0x33, 0xa5, 0x8d, 0x9a, 0x67, 0x9b, 0x97, 0x4e, 0x23, 0x48, 0x9c, 0xc4, 0x49, 0x9c,
	0x94, 0x6c, 0x93, 0xd6, 0xce, 0xa6, 0x27, 0x8a, 0x38, 0x34, 0xc0, 0xa1, 0x1c, 0xaa, 0xb0, 0x42,
	0x20, 0x71, 0x59, 0xbc, 0xde, 0xc1, 0xb5, 0xd8, 0x78, 0x5c, 0xdb, 0xbb, 0x4a, 0x55, 0x55, 0x42,
	0x7c, 0x82, 0x22, 0xc4, 0x05, 0x71, 0xe2, 0x80, 0x84, 0xc4, 0x07, 0xe9, 0xb1, 0x12, 0x17, 0xc4,
	0x01, 0xa1, 0x84, 0x0f, 0x52, 0x79, 0xe6, 0xb1, 0xd7, 0x2f, 0x63, 0x67, 0x7b, 0x5b, 0xcf, 0xf3,
	0xf6, 0x7b, 0xe6, 0xe5, 0xff, 0x2c, 0x6c, 0x32, 0xdf, 0xf1, 0x2c, 0x1e, 0xda, 0xce, 0x90, 0x59,
	0xe3, 0x4e, 0x9f, 0xc5, 0x76, 0xc7, 0x7a, 0x3a, 0x62, 0xe1, 0x33, 0x33, 0x08, 0x79, 0xcc, 0xe9,
	0xad, 0xc4, 0xc1, 0x94, 0x0e, 0x26, 0x3a, 0x68, 0xfb, 0x0e, 0x8f, 0x4e, 0x79, 0x64, 0xf5, 0xed,
	0x88, 0x49, 0xef, 0x2c, 0x36, 0xb0, 0x5d, 0xcf, 0xb7, 0x63, 0x8f, 0xfb, 0x32, 0x81, 0xb6, 0xec,
	0x72, 0x97, 0x8b, 0x9f, 0x56, 0xf2, 0x0b, 0x57, 0x57, 0x5d, 0xce, 0xdd, 0x21, 0xb3, 0xc4, 0x57,
	0x7f, 0xf4, 0xad, 0x65, 0xfb, 0x58, 0x51, 0x5b, 0x47, 0x93, 0x1d, 0x78, 0x96, 0xed, 0xfb, 0x3c,
	0x16, 0xd9, 0x22, 0xb4, 0x6e, 0xa9, 0x80, 0x03, 0x3b, 0xb4, 0x4f, 0x1b, 0x3d, 0xb0, 0x01, 0xe9,
	0xb1, 0xad, 0xf2, 0x70, 0x99, 0xcf, 0x22, 0x2f, 0x4d, 0xb2, 0x2a, 0x3b, 0xec, 0x49, 0x70, 0xf9,
	0x21, 0x4d, 0xc6, 0x32, 0xd0, 0xcf, 0x93, 0x96, 0x4f, 0x44, 0xd1, 0x2e, 0x7b, 0x3a, 0x62, 0x51,
	0x6c, 0x9c, 0xc0, 0xad, 0xc2, 0x6a, 0x14, 0x70, 0x3f, 0x62, 0xf4, 0x03, 0x98, 0x95, 0x70, 0x2b,
	0x64, 0x8b, 0xb4, 0x5b, 0x47, 0x6b, 0xa6, 0x62, 0x3f, 0x4d, 0x19, 0x74, 0x7c, 0xf5, 0xd5, 0xbf,
	0x9b, 0x33, 0x5d, 0x0c, 0x30, 0x56, 0xe0, 0x5d, 0x91, 0xf1, 0x4b, 0x1e, 0xb3, 0x2e, 0x1f, 0xf9,
	0x83, 0xac, 0xd6, 0x37, 0xf0, 0x5e, 0xc5, 0x82, 0xf5, 0x3e, 0x85, 0xd6, 0x98, 0xc7, 0xac, 0x17,
	0x8a, 0xe5, 0x15, 0xb2, 0xf5, 0x4e, 0xbb, 0x75, 0xa4, 0x2b, 0x8b, 0x66, 0xd1, 0x58, 0x17, 0xc6,
	0x59, 0x3a, 0x63, 0x0d, 0x56, 0x65, 0x37, 0x21, 0x1b, 0x57, 0xca, 0x0f, 0x41, 0x53, 0x19, 0x91,
	0xe0, 0x31, 0x2c, 0x04, 0xd2, 0x50, 0x84, 0xd8, 0x56, 0x77, 0x9e, 0xcb, 0x81, 0x1c, 0xf3, 0x41,
	0x3e, 0xaf, 0xa1, 0xc3, 0x7a, 0xd6, 0x6c, 0xf8, 0x09, 0x1b, 0x32, 0x57, 0xde, 0x87, 0x94, 0xe6,
	0x0c, 0x36, 0x6a, 0xec, 0x08, 0xf4, 0x15, 0xdc, 0x4c, 0xd2, 0x85, 0xbd, 0xc1, 0xc4, 0x88, 0x4c,
	0xbb, 0xb5, 0x1b, 0x93, 0xcb, 0x84, 0x58, 0x4b, 0xe3, 0x52, 0x01, 0xe3, 0x01, 0x92, 0xe1, 0x1a,
	0x0f, 0x1f, 0x0e, 0x06, 0x21, 0x8b, 0x52, 0x32, 0xaa, 0xc1, 0x75, 0x2c, 0xc9, 0xc4, 0xe9, 0xcf,
	0x75, 0xb3, 0x6f, 0xe3, 0x23, 0xa4, 0xae, 0xc6, 0x22, 0xf5, 0x3a, 0xcc, 0x8d, 0xed, 0xa1, 0x37,
	0x48, 0x6c, 0x18, 0x3d, 0x59, 0x30, 0x3e, 0x84, 0xb5, 0x7c, 0x38, 0x2b, 0x55, 0x6e, 0x0e, 0x2e,
	0x71, 0xb3, 0x72, 0xe9, 0x3c, 0xf7, 0x95, 0x12, 0xf7, 0x3a, 0x9e, 0xfd, 0x63, 0x76, 0x16, 0x27,
	0xfb, 0x74, 0xc2, 0x42, 0x8f, 0x0f, 0xd2, 0xb3, 0xb8, 0x8f, 0x58, 0x65, 0x2b, 0x26, 0x5e, 0x86,
	0x6b, 0xfd, 0x21, 0x77, 0xbe, 0x13, 0x48, 0x57, 0xbb, 0xf2, 0xc3, 0x58, 0xc5, 0xdb, 0x9c, 0x04,
	0xa5, 0xd7, 0x01, 0xf3, 0x1d, 0xc2, 0x4a, 0xd5, 0xd4, 0x98, 0x2c, 0x7d, 0x34, 0x1f, 0x0f, 0x6d,
	0xef, 0xf4, 0x8b, 0x67, 0x01, 0xcb, 0xee, 0xc9, 0x03, 0x2c, 0x93, 0xb7, 0x60, 0xaa, 0x4d, 0x68,
	0x39, 0xc9, 0x6a, 0x2f, 0x4e, 0x96, 0xc5, 0xdd, 0x98, 0xeb, 0x82, 0x93, 0x39, 0x1a, 0x1a, 0x72,
	0x3c, 0x8a, 0xaa, 0x3d, 0x3f, 0xc4, 0xa7, 0x52, 0xb4, 0x61, 0xe6, 0x5d, 0x58, 0xf0, 0xa2, 0x9e,
	0x78, 0x0c, 0x81, 0xb0, 0x08, 0xda, 0xeb, 0xdd, 0x1b, 0x5e, 0xce, 0xdb, 0xd8, 0xc0, 0x6d, 0x7b,
	0x14, 0x61, 0x93, 0xc5, 0x0a, 0x9f, 0xe1, 0x79, 0x55, 0xcc, 0x58, 0x64, 0x1f, 0x6e, 0x7a, 0x89,
	0x52, 0xb1, 0x6a, 0x9d, 0x45, 0xaf, 0x18, 0x73, 0xf4, 0xcf, 0x3c, 0x5c, 0x13, 0xc9, 0xe8, 0xf7,
	0x04, 0x66, 0xa5, 0xee, 0xd0, 0x3d, 0xe5, 0x33, 0xa8, 0x8a, 0x9c, 0xd6, 0xbe, 0xdc, 0x51, 0x32,
	0x19, 0x3b, 0x3f, 0xfc, 0xf5, 0xff, 0x4f, 0x57, 0x36, 0xe8, 0x9a, 0x55, 0xaf, 0xd7, 0xf4, 0x25,
	0x01, 0x98, 0x68, 0x18, 0x3d, 0xa8, 0xcf, 0x5e, 0xd1, 0x40, 0xed, 0xee, 0x74, 0xce, 0x88, 0xb3,
	0x27, 0x70, 0xb6, 0xe9, 0xa6, 0x12, 0x47, 0xbc, 0x6c, 0xc9, 0xf0, 0x2b, 0x81, 0xf9, 0x82, 0xae,
	0x51, 0xb3, 0xa1, 0x67, 0x85, 0x3a, 0x6a, 0xd6, 0xd4, 0xfe, 0xc8, 0xb6, 0x2f, 0xd8, 0x76, 0xa9,
	0xa1, 0xde, 0x2a, 0x19, 0x83, 0x78, 0x7f, 0x10, 0x58, 0x2a, 0x0b, 0x1d, 0xed, 0x34, 0x6f, 0x85,
	0x42, 0x34, 0xb5, 0xa3, 0xb7, 0x09, 0x41, 0x4e, 0x53, 0x70, 0xb6, 0xe9, 0xfb, 0xf5, 0x7b, 0x98,
	0x97, 0xd8, 0x84, 0x75, 0xb1, 0x24, 0x31, 0xf4, 0xb0, 0xbe, 0xae, 0x5a, 0xca, 0xb4, 0xce, 0x5b,
	0x44, 0x20, 0x68, 0x47, 0x80, 0x1e, 0xd0, 0x3b, 0x4a, 0xd0, 0x54, 0xca, 0xac, 0xe7, 0x99, 0x22,
	0xbe, 0xa0, 0x7f, 0x12, 0x58, 0x2a, 0x4b, 0x31, 0xbd, 0xbc, 0x74, 0x59, 0xf2, 0x9b, 0xf6, 0xb5,
	0x4e, 0xe9, 0xa7, 0xc3, 0xe5, 0xa1, 0xf5, 0x3c, 0x25, 0x7f, 0x41, 0x7f, 0x23, 0xb0, 0x50, 0xd4,
	0x58, 0xda, 0x70, 0xed, 0x94, 0x5a, 0xad, 0x1d, 0x4e, 0x1f, 0x80, 0xa0, 0xf7, 0x04, 0xe8, 0x1e,
	0xbd, 0xad, 0x04, 0xf5, 0xd9, 0x59, 0x9c, 0x57, 0x3a, 0xfa, 0x33, 0x81, 0x56, 0x4e, 0xb8, 0xe9,
	0xdd, 0xe6, 0x82, 0x45, 0xe9, 0xd7, 0xee, 0x4d, 0xe9, 0x8d, 0x6c, 0x77, 0x04, 0xdb, 0x0e, 0xdd,
	0xae, 0x67, 0xc3, 0x97, 0x44, 0x7f, 0x24, 0x00, 0x93, 0x21, 0xd0, 0xa4, 0x3a, 0x95, 0x21, 0xd2,
	0xa4, 0x3a, 0xd5, 0xb9, 0x62, 0xb4, 0x05, 0x94, 0x41, 0xb7, 0x94, 0x50, 0xb9, 0x91, 0x43, 0x7f,
	0x21, 0x70, 0x23, 0x3f, 0x40, 0x68, 0x43, 0xfb, 0x8a, 0x21, 0xa4, 0x99, 0xd3, 0xba, 0x23, 0xd9,
	0x81, 0x20, 0xbb, 0x4d, 0x77, 0x94, 0x64, 0xc5, 0x91, 0x45, 0x7f, 0x27, 0xb0, 0x58, 0x9a, 0x3d,
	0x4d, 0x0f, 0x59, 0x3d, 0xc5, 0x9a, 0x1e, 0x72, 0xcd, 0x60, 0xbb, 0x44, 0x71, 0x2a, 0x33, 0xef,
	0xf8, 0xf8, 0xd5, 0xb9, 0x4e, 0x5e, 0x9f, 0xeb, 0xe4, 0xbf, 0x73, 0x9d, 0xbc, 0xbc, 0xd0, 0x67,
	0x5e, 0x5f, 0xe8, 0x33, 0x7f, 0x5f, 0xe8, 0x33, 0x5f, 0xb7, 0x5d, 0x2f, 0x7e, 0x32, 0xea, 0x9b,
	0x0e, 0x3f, 0x15, 0xb9, 0x9c, 0x27, 0xb6, 0xe7, 0xcb, 0xac, 0x67, 0x69, 0x5e, 0x71, 0x12, 0xfd,
	0x59, 0xf1, 0x27, 0xff, 0xfe, 0x9b, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd3, 0x29, 0x32, 0x6a, 0x19,
	0x0d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params queries the parameters of othe racle module
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// VoteRounds queries the active VoteRounds for all claim types
	VoteRounds(ctx context.Context, in *QueryVoteRoundsRequest, opts ...grpc.CallOption) (*QueryVoteRoundsResponse, error)
	// PrevoteRounds queries the active PrevoteRounds for all claim types
	PrevoteRounds(ctx context.Context, in *QueryPrevoteRoundsRequest, opts ...grpc.CallOption) (*QueryPrevoteRoundsResponse, error)
	// VoterDelegations queries all the voter delegations
	VoterDelegations(ctx context.Context, in *QueryVoterDelegationsRequest, opts ...grpc.CallOption) (*QueryVoterDelegationsResponse, error)
	// DelegateAddress queries a delegate address attached to a validator
	DelegateAddress(ctx context.Context, in *QueryDelegateAddressRequest, opts ...grpc.CallOption) (*QueryDelegateAddressResponse, error)
	// ValidatorAddress queries a validator address attached to a vote delegate
	DelegatorAddress(ctx context.Context, in *QueryDelegatorAddressRequest, opts ...grpc.CallOption) (*QueryDelegatorAddressResponse, error)
	// NextVotePeriod queries the block height of the next vote period
	NextVotePeriod(ctx context.Context, in *QueryNextVotePeriodRequest, opts ...grpc.CallOption) (*QueryNextVotePeriodResponse, error)
	// NextPrevote queries the block height of the next prevote period
	NextPrevote(ctx context.Context, in *QueryNextPrevoteRequest, opts ...grpc.CallOption) (*QueryNextPrevoteResponse, error)
	// ClaimTypes queries the names of the registered oracle claim types
	ClaimTypes(ctx context.Context, in *QueryClaimTypesRequest, opts ...grpc.CallOption) (*QueryClaimTypesResponse, error)
	// IsVotePeriod queries if the current block is part of a vote period
	IsVotePeriod(ctx context.Context, in *QueryIsVotePeriodRequest, opts ...grpc.CallOption) (*QueryIsVotePeriodResponse, error)
	// IsPrevotePeriod queries if the current block is part of a prevote period
	IsPrevotePeriod(ctx context.Context, in *QueryIsPrevotePeriodRequest, opts ...grpc.CallOption) (*QueryIsPrevotePeriodResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/enci.oracle.v1beta1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VoteRounds(ctx context.Context, in *QueryVoteRoundsRequest, opts ...grpc.CallOption) (*QueryVoteRoundsResponse, error) {
	out := new(QueryVoteRoundsResponse)
	err := c.cc.Invoke(ctx, "/enci.oracle.v1beta1.Query/VoteRounds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PrevoteRounds(ctx context.Context, in *QueryPrevoteRoundsRequest, opts ...grpc.CallOption) (*QueryPrevoteRoundsResponse, error) {
	out := new(QueryPrevoteRoundsResponse)
	err := c.cc.Invoke(ctx, "/enci.oracle.v1beta1.Query/PrevoteRounds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VoterDelegations(ctx context.Context, in *QueryVoterDelegationsRequest, opts ...grpc.CallOption) (*QueryVoterDelegationsResponse, error) {
	out := new(QueryVoterDelegationsResponse)
	err := c.cc.Invoke(ctx, "/enci.oracle.v1beta1.Query/VoterDelegations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DelegateAddress(ctx context.Context, in *QueryDelegateAddressRequest, opts ...grpc.CallOption) (*QueryDelegateAddressResponse, error) {
	out := new(QueryDelegateAddressResponse)
	err := c.cc.Invoke(ctx, "/enci.oracle.v1beta1.Query/DelegateAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DelegatorAddress(ctx context.Context, in *QueryDelegatorAddressRequest, opts ...grpc.CallOption) (*QueryDelegatorAddressResponse, error) {
	out := new(QueryDelegatorAddressResponse)
	err := c.cc.Invoke(ctx, "/enci.oracle.v1beta1.Query/DelegatorAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NextVotePeriod(ctx context.Context, in *QueryNextVotePeriodRequest, opts ...grpc.CallOption) (*QueryNextVotePeriodResponse, error) {
	out := new(QueryNextVotePeriodResponse)
	err := c.cc.Invoke(ctx, "/enci.oracle.v1beta1.Query/NextVotePeriod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NextPrevote(ctx context.Context, in *QueryNextPrevoteRequest, opts ...grpc.CallOption) (*QueryNextPrevoteResponse, error) {
	out := new(QueryNextPrevoteResponse)
	err := c.cc.Invoke(ctx, "/enci.oracle.v1beta1.Query/NextPrevote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ClaimTypes(ctx context.Context, in *QueryClaimTypesRequest, opts ...grpc.CallOption) (*QueryClaimTypesResponse, error) {
	out := new(QueryClaimTypesResponse)
	err := c.cc.Invoke(ctx, "/enci.oracle.v1beta1.Query/ClaimTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IsVotePeriod(ctx context.Context, in *QueryIsVotePeriodRequest, opts ...grpc.CallOption) (*QueryIsVotePeriodResponse, error) {
	out := new(QueryIsVotePeriodResponse)
	err := c.cc.Invoke(ctx, "/enci.oracle.v1beta1.Query/IsVotePeriod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IsPrevotePeriod(ctx context.Context, in *QueryIsPrevotePeriodRequest, opts ...grpc.CallOption) (*QueryIsPrevotePeriodResponse, error) {
	out := new(QueryIsPrevotePeriodResponse)
	err := c.cc.Invoke(ctx, "/enci.oracle.v1beta1.Query/IsPrevotePeriod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params queries the parameters of othe racle module
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// VoteRounds queries the active VoteRounds for all claim types
	VoteRounds(context.Context, *QueryVoteRoundsRequest) (*QueryVoteRoundsResponse, error)
	// PrevoteRounds queries the active PrevoteRounds for all claim types
	PrevoteRounds(context.Context, *QueryPrevoteRoundsRequest) (*QueryPrevoteRoundsResponse, error)
	// VoterDelegations queries all the voter delegations
	VoterDelegations(context.Context, *QueryVoterDelegationsRequest) (*QueryVoterDelegationsResponse, error)
	// DelegateAddress queries a delegate address attached to a validator
	DelegateAddress(context.Context, *QueryDelegateAddressRequest) (*QueryDelegateAddressResponse, error)
	// ValidatorAddress queries a validator address attached to a vote delegate
	DelegatorAddress(context.Context, *QueryDelegatorAddressRequest) (*QueryDelegatorAddressResponse, error)
	// NextVotePeriod queries the block height of the next vote period
	NextVotePeriod(context.Context, *QueryNextVotePeriodRequest) (*QueryNextVotePeriodResponse, error)
	// NextPrevote queries the block height of the next prevote period
	NextPrevote(context.Context, *QueryNextPrevoteRequest) (*QueryNextPrevoteResponse, error)
	// ClaimTypes queries the names of the registered oracle claim types
	ClaimTypes(context.Context, *QueryClaimTypesRequest) (*QueryClaimTypesResponse, error)
	// IsVotePeriod queries if the current block is part of a vote period
	IsVotePeriod(context.Context, *QueryIsVotePeriodRequest) (*QueryIsVotePeriodResponse, error)
	// IsPrevotePeriod queries if the current block is part of a prevote period
	IsPrevotePeriod(context.Context, *QueryIsPrevotePeriodRequest) (*QueryIsPrevotePeriodResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) VoteRounds(ctx context.Context, req *QueryVoteRoundsRequest) (*QueryVoteRoundsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteRounds not implemented")
}
func (*UnimplementedQueryServer) PrevoteRounds(ctx context.Context, req *QueryPrevoteRoundsRequest) (*QueryPrevoteRoundsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrevoteRounds not implemented")
}
func (*UnimplementedQueryServer) VoterDelegations(ctx context.Context, req *QueryVoterDelegationsRequest) (*QueryVoterDelegationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoterDelegations not implemented")
}
func (*UnimplementedQueryServer) DelegateAddress(ctx context.Context, req *QueryDelegateAddressRequest) (*QueryDelegateAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegateAddress not implemented")
}
func (*UnimplementedQueryServer) DelegatorAddress(ctx context.Context, req *QueryDelegatorAddressRequest) (*QueryDelegatorAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegatorAddress not implemented")
}
func (*UnimplementedQueryServer) NextVotePeriod(ctx context.Context, req *QueryNextVotePeriodRequest) (*QueryNextVotePeriodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextVotePeriod not implemented")
}
func (*UnimplementedQueryServer) NextPrevote(ctx context.Context, req *QueryNextPrevoteRequest) (*QueryNextPrevoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextPrevote not implemented")
}
func (*UnimplementedQueryServer) ClaimTypes(ctx context.Context, req *QueryClaimTypesRequest) (*QueryClaimTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimTypes not implemented")
}
func (*UnimplementedQueryServer) IsVotePeriod(ctx context.Context, req *QueryIsVotePeriodRequest) (*QueryIsVotePeriodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsVotePeriod not implemented")
}
func (*UnimplementedQueryServer) IsPrevotePeriod(ctx context.Context, req *QueryIsPrevotePeriodRequest) (*QueryIsPrevotePeriodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsPrevotePeriod not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enci.oracle.v1beta1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VoteRounds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVoteRoundsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VoteRounds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enci.oracle.v1beta1.Query/VoteRounds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VoteRounds(ctx, req.(*QueryVoteRoundsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PrevoteRounds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPrevoteRoundsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PrevoteRounds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enci.oracle.v1beta1.Query/PrevoteRounds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PrevoteRounds(ctx, req.(*QueryPrevoteRoundsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VoterDelegations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVoterDelegationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VoterDelegations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enci.oracle.v1beta1.Query/VoterDelegations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VoterDelegations(ctx, req.(*QueryVoterDelegationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DelegateAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegateAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DelegateAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enci.oracle.v1beta1.Query/DelegateAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DelegateAddress(ctx, req.(*QueryDelegateAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DelegatorAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegatorAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DelegatorAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enci.oracle.v1beta1.Query/DelegatorAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DelegatorAddress(ctx, req.(*QueryDelegatorAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NextVotePeriod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNextVotePeriodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NextVotePeriod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enci.oracle.v1beta1.Query/NextVotePeriod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NextVotePeriod(ctx, req.(*QueryNextVotePeriodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NextPrevote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNextPrevoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NextPrevote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enci.oracle.v1beta1.Query/NextPrevote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NextPrevote(ctx, req.(*QueryNextPrevoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ClaimTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryClaimTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ClaimTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enci.oracle.v1beta1.Query/ClaimTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ClaimTypes(ctx, req.(*QueryClaimTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IsVotePeriod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIsVotePeriodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IsVotePeriod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enci.oracle.v1beta1.Query/IsVotePeriod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IsVotePeriod(ctx, req.(*QueryIsVotePeriodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IsPrevotePeriod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIsPrevotePeriodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IsPrevotePeriod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/enci.oracle.v1beta1.Query/IsPrevotePeriod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IsPrevotePeriod(ctx, req.(*QueryIsPrevotePeriodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "enci.oracle.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "VoteRounds",
			Handler:    _Query_VoteRounds_Handler,
		},
		{
			MethodName: "PrevoteRounds",
			Handler:    _Query_PrevoteRounds_Handler,
		},
		{
			MethodName: "VoterDelegations",
			Handler:    _Query_VoterDelegations_Handler,
		},
		{
			MethodName: "DelegateAddress",
			Handler:    _Query_DelegateAddress_Handler,
		},
		{
			MethodName: "DelegatorAddress",
			Handler:    _Query_DelegatorAddress_Handler,
		},
		{
			MethodName: "NextVotePeriod",
			Handler:    _Query_NextVotePeriod_Handler,
		},
		{
			MethodName: "NextPrevote",
			Handler:    _Query_NextPrevote_Handler,
		},
		{
			MethodName: "ClaimTypes",
			Handler:    _Query_ClaimTypes_Handler,
		},
		{
			MethodName: "IsVotePeriod",
			Handler:    _Query_IsVotePeriod_Handler,
		},
		{
			MethodName: "IsPrevotePeriod",
			Handler:    _Query_IsPrevotePeriod_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "enci/oracle/v1beta1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryVoteRoundsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVoteRoundsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVoteRoundsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryVoteRoundsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVoteRoundsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVoteRoundsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VoteRounds) > 0 {
		for iNdEx := len(m.VoteRounds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VoteRounds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryPrevoteRoundsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPrevoteRoundsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPrevoteRoundsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryPrevoteRoundsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPrevoteRoundsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPrevoteRoundsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PrevoteRounds) > 0 {
		for iNdEx := len(m.PrevoteRounds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PrevoteRounds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryVoterDelegationsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVoterDelegationsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVoterDelegationsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryVoterDelegationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVoterDelegationsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVoterDelegationsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VoterDelegations) > 0 {
		for iNdEx := len(m.VoterDelegations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VoterDelegations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegatorAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegatorAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegatorAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Delegate) > 0 {
		i -= len(m.Delegate)
		copy(dAtA[i:], m.Delegate)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Delegate)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegatorAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegatorAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegatorAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegateAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegateAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegateAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegateAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegateAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegateAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Delegate) > 0 {
		i -= len(m.Delegate)
		copy(dAtA[i:], m.Delegate)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Delegate)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *QueryNextVotePeriodRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNextVotePeriodRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNextVotePeriodRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryNextVotePeriodResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNextVotePeriodResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNextVotePeriodResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Block != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Block))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryNextPrevoteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNextPrevoteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNextPrevoteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryNextPrevoteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNextPrevoteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNextPrevoteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Block != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Block))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryClaimTypesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryClaimTypesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryClaimTypesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryClaimTypesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryClaimTypesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryClaimTypesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClaimTypes) > 0 {
		for iNdEx := len(m.ClaimTypes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ClaimTypes[iNdEx])
			copy(dAtA[i:], m.ClaimTypes[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.ClaimTypes[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryIsVotePeriodRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIsVotePeriodRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIsVotePeriodRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryIsVotePeriodResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIsVotePeriodResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIsVotePeriodResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsVotePeriod {
		i--
		if m.IsVotePeriod {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryIsPrevotePeriodRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIsPrevotePeriodRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIsPrevotePeriodRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryIsPrevotePeriodResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIsPrevotePeriodResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIsPrevotePeriodResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsPrevotePeriod {
		i--
		if m.IsPrevotePeriod {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryVoteRoundsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryVoteRoundsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.VoteRounds) > 0 {
		for _, e := range m.VoteRounds {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryPrevoteRoundsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryPrevoteRoundsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PrevoteRounds) > 0 {
		for _, e := range m.PrevoteRounds {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryVoterDelegationsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryVoterDelegationsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.VoterDelegations) > 0 {
		for _, e := range m.VoterDelegations {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryDelegatorAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Delegate)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDelegatorAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDelegateAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDelegateAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Delegate)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryNextVotePeriodRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryNextVotePeriodResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Block != 0 {
		n += 1 + sovQuery(uint64(m.Block))
	}
	return n
}

func (m *QueryNextPrevoteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryNextPrevoteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Block != 0 {
		n += 1 + sovQuery(uint64(m.Block))
	}
	return n
}

func (m *QueryClaimTypesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryClaimTypesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ClaimTypes) > 0 {
		for _, s := range m.ClaimTypes {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryIsVotePeriodRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryIsVotePeriodResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsVotePeriod {
		n += 2
	}
	return n
}

func (m *QueryIsPrevotePeriodRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryIsPrevotePeriodResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsPrevotePeriod {
		n += 2
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVoteRoundsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVoteRoundsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVoteRoundsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVoteRoundsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVoteRoundsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVoteRoundsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteRounds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoteRounds = append(m.VoteRounds, VoteRound{})
			if err := m.VoteRounds[len(m.VoteRounds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPrevoteRoundsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPrevoteRoundsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPrevoteRoundsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPrevoteRoundsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPrevoteRoundsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPrevoteRoundsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevoteRounds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrevoteRounds = append(m.PrevoteRounds, PrevoteRound{})
			if err := m.PrevoteRounds[len(m.PrevoteRounds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVoterDelegationsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVoterDelegationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVoterDelegationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVoterDelegationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVoterDelegationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVoterDelegationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoterDelegations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoterDelegations = append(m.VoterDelegations, VoterDelegation{})
			if err := m.VoterDelegations[len(m.VoterDelegations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegatorAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegatorAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegatorAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegatorAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegatorAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegatorAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegateAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegateAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegateAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegateAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegateAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegateAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNextVotePeriodRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNextVotePeriodRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNextVotePeriodRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNextVotePeriodResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNextVotePeriodResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNextVotePeriodResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			m.Block = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Block |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNextPrevoteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNextPrevoteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNextPrevoteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNextPrevoteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNextPrevoteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNextPrevoteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			m.Block = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Block |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryClaimTypesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryClaimTypesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryClaimTypesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryClaimTypesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryClaimTypesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryClaimTypesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimTypes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimTypes = append(m.ClaimTypes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIsVotePeriodRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIsVotePeriodRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIsVotePeriodRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIsVotePeriodResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIsVotePeriodResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIsVotePeriodResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsVotePeriod", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsVotePeriod = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIsPrevotePeriodRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIsPrevotePeriodRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIsPrevotePeriodRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIsPrevotePeriodResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIsPrevotePeriodResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIsPrevotePeriodResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPrevotePeriod", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPrevotePeriod = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
