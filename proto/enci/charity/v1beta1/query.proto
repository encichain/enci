syntax = "proto3";
package enci.charity.v1beta1;

import "google/api/annotations.proto";
//import "cosmos/base/query/v1beta1/pagination.proto";
import "gogoproto/gogo.proto";
// this line is used by starport scaffolding # 1

import "enci/charity/v1beta1/charity.proto";
import "cosmos/base/v1beta1/coin.proto";
option go_package = "github.com/encichain/enci/x/charity/types";

// Query defines the gRPC querier service.
service Query {
    // this line is used by starport scaffolding # 2

    // Params returns all params
    rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
        option (google.api.http).get = "/enci/charity/v1beta1/params";
    }

    // TaxRate returns the set tax rate
    rpc TaxRate(QueryTaxRateRequest) returns (QueryTaxRateResponse) {
        option (google.api.http).get = "/enci/charity/v1beta1/taxrate";
    }

    // Charities returns the set charities
    rpc Charities(QueryCharitiesRequest) returns (QueryCharitiesResponse) {
        option (google.api.http).get = "/enci/charity/v1beta1/charities";
    } 

    // TaxCaps returns the tax caps
    rpc TaxCaps(QueryTaxCapsRequest) returns (QueryTaxCapsResponse) {
        option (google.api.http).get = "/enci/charity/v1beta1/taxcaps";
    }

    // BurnRate returns the set charity burn rate
    rpc BurnRate(QueryBurnRateRequest) returns (QueryBurnRateResponse) {
        option (google.api.http).get = "/enci/charity/v1beta1/burnrate";
    }

    // TaxCap returns the tax cap based on denom
    rpc TaxCap(QueryTaxCapRequest) returns (QueryTaxCapResponse) {
        option (google.api.http).get = "/enci/charity/v1beta1/taxcaps/{denom}";
    }

    // TaxRateLimits returns the tax rate limits
    rpc TaxRateLimits(QueryTaxRateLimitsRequest) returns (QueryTaxRateLimitsResponse) {
        option (google.api.http).get = "/enci/charity/v1beta1/taxratelimits";
    }

    // TaxProceeds returns the tax proceeds for the current epoch
    rpc TaxProceeds(QueryTaxProceedsRequest) returns (QueryTaxProceedsResponse) {
        option (google.api.http).get = "/enci/charity/v1beta1/taxproceeds";
    }

    // CollectionEpochs returns the list of collection epochs 
    rpc CollectionEpochs(QueryAllCollectionEpochsRequest) returns (QueryAllCollectionEpochsResponse) {
        option (google.api.http).get = "/enci/charity/v1beta1/collectionepochs";
    }
    
    // CollectionEpoch returns a single collection epoch based on *epoch*
    rpc CollectionEpoch(QueryCollectionEpochRequest) returns (QueryCollectionEpochResponse) {
        option (google.api.http).get = "/enci/charity/v1beta1/collectionepochs/{epoch}";
    }

}

// this line is used by starport scaffolding # 3

// QueryTaxRateRequest is the request type for the Query TaxRate Request RPC method
message QueryTaxRateRequest {}

// QueryTaxRateResponse is the response type for the Query TaxRate Request RPC method
message QueryTaxRateResponse {
    string tax_rate = 1 [
        (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", 
        (gogoproto.nullable) = false
    ];
}

// QueryParamsRequest is the request type for the Query Params Request RPC method
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query Params Request RPC method
message QueryParamsResponse {
    Params params = 1 [(gogoproto.nullable) = false];
}

// QueryCharitiesRequest is the request type for the Query Charity Request RPC method
message QueryCharitiesRequest {}

// QueryCharitiesResponse is the response type for the Query Charity Request RPC method
message QueryCharitiesResponse {
    repeated Charity charity = 1 [(gogoproto.nullable) = false];
}

// QueryTaxCapsRequest is the request type for the Query TaxCaps Request gRPC method
// Request type for all taxcaps
message QueryTaxCapsRequest {}

// QueryTaxCapsResponse is the response type for the Query TaxCaps Request gRPC method
message QueryTaxCapsResponse {
    repeated TaxCap tax_caps = 1 [(gogoproto.nullable) = false];
}

// QueryBurnRateRequest is the request type for the Query BurnRate Request RPC method
message QueryBurnRateRequest {}

// QueryBurnRateResponse is the response type for the Query BurnRate Request RPC method
message QueryBurnRateResponse {
    string burn_rate = 1 [
        (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", 
        (gogoproto.nullable) = false
    ];
}

// QueryTaxCapRequest is the request type for the Query TaxCap Request RPC method
// Request type for a single denom taxcap
message QueryTaxCapRequest {
    // denom defines the requested denom for the request
    string denom = 1;
}

// QueryTaxCapResponse is the response type for the Query TaxCap Request gRPC method
message QueryTaxCapResponse {
    string Cap = 1 [
        (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", 
        (gogoproto.nullable) = false
        ];
}


// QueryTaxProceedsRequest is the request type for the Query TaxProceeds RPC method.
message QueryTaxProceedsRequest {}

// QueryTaxProceedsResponse is response type for the Query TaxProceeds RPC method
message QueryTaxProceedsResponse {
    repeated cosmos.base.v1beta1.Coin tax_proceeds = 1[
        (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
        (gogoproto.nullable) = false
    ];
}

// QueryTaxRateLimitsRequest is the request type for the Query TaxRateLimits Request gRPC method
message QueryTaxRateLimitsRequest {}

// QueryTaxRateLimitsResponse is the response type for the Query TaxRateLimits Request gRPC method
message QueryTaxRateLimitsResponse {
    TaxRateLimits tax_rate_limits = 1 [(gogoproto.nullable) = false];
}

// QueryAllCollectionEpochsRequest is the request type for the QueryAllCollectionEpochs Request gRPC method
message QueryAllCollectionEpochsRequest {}

// QueryAllCollectionEpochsResponse is the response type for the QueryAllCollectionEpochs Request gRPC method
message QueryAllCollectionEpochsResponse {
    repeated CollectionEpoch collection_epochs = 1 [(gogoproto.nullable) = false];
}

//QueryCollectionEpochRequest is the request type for the Query CollectionEpoch Request RPC method
// Queries a single CollectionEpoch based on *epoch*
message QueryCollectionEpochRequest {
    uint64 epoch = 1;
}

//QueryCollectionEpochResponse is the response type for the Query CollectionEpoch Request RPC method
// Responds with a single CollectionEpoch based on *epoch*
message QueryCollectionEpochResponse {
   CollectionEpoch collection_epoch = 1 [(gogoproto.nullable) = false];
}