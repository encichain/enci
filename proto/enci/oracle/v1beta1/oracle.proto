syntax = "proto3";
package enci.oracle.v1beta1;

option go_package = "github.com/encichain/enci/x/oracle/types";
import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";

// Vote is a vote for a given claim by a validator
message Vote {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  google.protobuf.Any claim = 1 [(gogoproto.moretags) = "yaml:\"claim\""];
  string validator = 2 [(gogoproto.moretags) = "yaml:\"validator\""];
}

// Prevote submitted by the validator for a claim, designed to hide claim values
// by presubmitting a hash.
// Hash is in the format: Hex string SHA256("{salt}:{claim Hash}:{validator address}")
message Prevote {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string hash = 1 [(gogoproto.moretags) = "yaml:\"hash\""];
  string validator = 2 [(gogoproto.moretags) = "yaml:\"validator\""];
  uint64 submit_block = 3 [(gogoproto.moretags) = "yaml:\"submit_block\""];
}

// VoteRound contains all claim votes during VotePeriod
message VoteRound {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  // namespace so we can have multiple claim types
  string claim_type = 1 [(gogoproto.moretags) = "yaml:\"claim_type\""];
  repeated Vote votes = 2 [
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"votes\""
  ];
}

// PrevoteRound contains all claim prevotes during PrevotePeriod
message PrevoteRound {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string claim_type = 1 [(gogoproto.moretags) = "yaml:\"claim_type\""];
  repeated Prevote prevotes = 2 [
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"prevotes\""
  ]; 
}

// TestClaim is a concrete Claim type we use for testing
message TestClaim {
  int64 blockHeight = 1;
  string claimType = 2;
  string content = 3;
}