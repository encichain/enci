syntax = "proto3";
package user.encichain.charity;

import "google/api/annotations.proto";
//import "cosmos/base/query/v1beta1/pagination.proto";
import "gogoproto/gogo.proto";
// this line is used by starport scaffolding # 1

import "charity/charity.proto";
option go_package = "github.com/user/encichain/x/charity/types";

// Query defines the gRPC querier service.
service Query {
    // this line is used by starport scaffolding # 2

    // Params returns all params
    rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
        option (google.api.http).get = "/charity/charity/params";
    }

    // TaxRate returns the set tax rate
    rpc TaxRate(QueryTaxRateRequest) returns (QueryTaxRateResponse) {
        option (google.api.http).get = "/encichain/charity/taxrate";
    }

    // Charity returns the set charity
    rpc Charity(QueryCharityRequest) returns (QueryCharityResponse) {
        option (google.api.http).get = "/encichain/charity/charity";
    } 

    // TaxCap returns the tax cap amount
    rpc TaxCap(QueryTaxCapRequest) returns (QueryTaxCapResponse) {
        option (google.api.http).get = "/encichain/charity/taxcap";
    }

    // TaxRateLimits returns the tax rate limits
    rpc TaxRateLimits(QueryTaxRateLimitsRequest) returns (QueryTaxRateLimitsResponse) {
        option (google.api.http).get = "/encichain/charity/taxratelimits";
    }

    // CollectionPeriods returns the list of collection periods 
    rpc CollectionPeriods(QueryCollectionPeriodsRequest) returns (QueryCollectionPeriodsResponse) {
        option (google.api.http).get = "/encichain/charity/collectionperiods";
    }

}

// this line is used by starport scaffolding # 3

// QueryTaxRateRequest is the request type for the Query TaxRate Request RPC method
message QueryTaxRateRequest {}

// QueryTaxRateResponse is the response type for the Query TaxRate Request RPC method
message QueryTaxRateResponse {
    string tax_rate = 1 [
        (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", 
        (gogoproto.nullable) = false
    ];
}

// QueryParamsRequest is the request type for the Query Params Request RPC method
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query Params Request RPC method
message QueryParamsResponse {
    Params params = 1 [(gogoproto.nullable) = false];
}

// QueryCharityRequest is the request type for the Query Charity Request RPC method
message QueryCharityRequest {}

// QueryCharityResponse is the response type for the Query Charity Request RPC method
message QueryCharityResponse {
    Charity charity = 1 [(gogoproto.nullable) = false];
}

// QueryTaxCapRequest is the request type for the Query TaxCap Request RPC method
message QueryTaxCapRequest {}

// QueryTaxCapResponse is the response type for the Query TaxCap Request RPC method
message QueryTaxCapResponse {
    string tax_cap = 1 [
        (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", 
        (gogoproto.nullable) = false
        ];
}

// QueryTaxRateLimitsRequest is the request type for the Query TaxRateLimits Request RPC method
message QueryTaxRateLimitsRequest {}

// QueryTaxRateLimitsResponse is the response type for the Query TaxRateLimits Request RPC method
message QueryTaxRateLimitsResponse {
    TaxRateLimits tax_rate_limits = 1 [(gogoproto.nullable) = false];
}

// QueryCollectionPeriodsRequest is the request type for the Query CollectionPeriods Request RPC method
message QueryCollectionPeriodsRequest {}

// QueryCollectionPeriodsResponse is the response type for the Query CollectionPeriods Request RPC method
message QueryCollectionPeriodsResponse {
    repeated CollectionPeriod collection_periods = 1 [(gogoproto.nullable) = false];
}