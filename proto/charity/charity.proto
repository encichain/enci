syntax = "proto3";
package user.encichain.charity;

option go_package = "github.com/user/encichain/x/charity/types";

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";

// Charity defines the charity object
message Charity {
    string charity_name = 1; // Name of the charity
    string accAddress = 2; // Account address for the charity in the form of bech32 string
    string checksum = 3; // SHA-256 checksum of the charity_name + accAddress
}


// Params defines parameters of the charity module able to be changed by governance proposals
message Params {
    repeated Charity charities = 1 [(gogoproto.nullable) = false]; // Set the target charities
    // tax_rate defines the charity tax rate per taxable transaction message ; constrained by TaxRateLimits
    string tax_rate = 2 [               
        (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", 
        (gogoproto.nullable) = false
    ];
    // Tax_caps represents max tax amount for each denom
    repeated TaxCap tax_caps = 3 [(gogoproto.nullable) = false]; 
    // burn_rate represents the percentage of balance to be burned from charity tax collector account per end of period
    // constrained by TaxRateLimits
    string burn_rate = 4 [
        (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", 
        (gogoproto.nullable) = false        
    ];
}

// TaxCap defines a tax cap for a denom
message TaxCap {
    string denom = 1;
    string Cap = 2 [
        (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", 
        (gogoproto.nullable) = false
    ];
}


// TaxRateLimits defines upper and lower limits to the tax_rate and burn_rate
message TaxRateLimits {
    string rate_min = 1 [
        (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
        (gogoproto.nullable)   = false
    ];
    string tax_rate_max = 2 [
        (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
        (gogoproto.nullable)   = false
    ];
    string burn_rate_max = 3 [
        (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
        (gogoproto.nullable)   = false
    ];
}

// CollectionPeriod defines the record of each tax collection period
message CollectionPeriod {
    uint64 period = 1;
    // Tax collected during entire period
    repeated cosmos.base.v1beta1.Coin tax_collected = 2 [
        (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
        (gogoproto.nullable) = false
    ];  
    // Amount paid out to target charities
    repeated Payout payouts = 3 [(gogoproto.nullable) = false];
}

// Payout defines a payment to a charity
message Payout {
    string recipientaddr = 1;
    repeated cosmos.base.v1beta1.Coin coins = 2 [
        (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
        (gogoproto.nullable) = false];
}

// TaxProceeds defines a TaxProceed object containing sdk.Coins field
message TaxProceeds {
    repeated cosmos.base.v1beta1.Coin tax_proceeds = 1 [
        (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
        (gogoproto.nullable) = false];
}

// Payouts defines a slice of Payout
message Payouts {
    repeated Payout payouts = 1 [(gogoproto.nullable) = false];
}
